--13/11/2017----------------------------------------------------- 
Lexical Tokens for a.spl 
--13:43:24.69----------------------------------------------------- 
Identifier token: ProgA
Token: COLON
Token: CODE
Token: WRITE
Token: BRA
Character constant token: h
Token: COMMA
Character constant token: e
Token: COMMA
Character constant token: l
Token: COMMA
Character constant token: l
Token: COMMA
Character constant token: o
Token: KET
Token: SEMI_COLON
Token: NEWLINE
Token: ENDP
Identifier token: ProgA
Token: FULL_STOP
--13/11/2017----------------------------------------------------- 
Lexical Tokens for b.spl 
--13:43:25.26----------------------------------------------------- 
Identifier token: ProgB
Token: COLON
Token: DECLARATIONS
Identifier token: a
Token: COMMA
Identifier token: b
Token: OF
Token: TYPE
Token: INTEGER
Token: SEMI_COLON
Identifier token: c
Token: OF
Token: TYPE
Token: CHARACTER
Token: SEMI_COLON
Identifier token: d
Token: COMMA
Identifier token: e
Token: OF
Token: TYPE
Token: REAL
Token: SEMI_COLON
Token: CODE
Token: READ
Token: BRA
Identifier token: a
Token: KET
Token: SEMI_COLON
Token: READ
Token: BRA
Identifier token: b
Token: KET
Token: SEMI_COLON
Token: IF
Identifier token: a
Token: GREATER_THAN
Identifier token: b
Token: THEN
Token: WRITE
Token: BRA
Character constant token: A
Token: KET
Token: ELSE
Token: WRITE
Token: BRA
Character constant token: B
Token: KET
Token: END_IF
Token: SEMI_COLON
Token: NEWLINE
Token: SEMI_COLON
Token: READ
Token: BRA
Identifier token: d
Token: KET
Token: SEMI_COLON
Identifier token: d
Token: MULTIPLY
Real token: 2.300000
Token: ASSIGNMENT
Identifier token: e
Token: SEMI_COLON
Token: WRITE
Token: BRA
Identifier token: e
Token: KET
Token: SEMI_COLON
Token: NEWLINE
Token: SEMI_COLON
Token: READ
Token: BRA
Identifier token: c
Token: KET
Token: SEMI_COLON
Token: WRITE
Token: BRA
Identifier token: c
Token: KET
Token: SEMI_COLON
Token: NEWLINE
Token: ENDP
Identifier token: ProgB
Token: FULL_STOP
--13/11/2017----------------------------------------------------- 
Lexical Tokens for c.spl 
--13:43:25.83----------------------------------------------------- 
Identifier token: Prog3
Token: COLON
Token: DECLARATIONS
Identifier token: a
Token: OF
Token: TYPE
Token: INTEGER
Token: SEMI_COLON
Token: CODE
Token: FOR
Identifier token: a
Token: IS
Integer token:  1
Token: BY
Integer token:  1
Token: TO
Integer token:  13
Token: DO
Token: IF
Token: NOT
Identifier token: a
Token: EQUAL_TO
Integer token:  7
Token: THEN
Token: WRITE
Token: BRA
Identifier token: a
Token: KET
Token: SEMI_COLON
Token: NEWLINE
Token: END_IF
Token: END_FOR
Token: SEMI_COLON
Integer token:  0
Token: ASSIGNMENT
Identifier token: a
Token: SEMI_COLON
Token: DO
Identifier token: a
Token: ADD
Integer token:  1
Token: ASSIGNMENT
Identifier token: a
Token: SEMI_COLON
Token: IF
Token: NOT
Identifier token: a
Token: EQUAL_TO
Integer token:  6
Token: AND
Identifier token: a
Token: NOT_EQUAL
Integer token:  8
Token: THEN
Token: WRITE
Token: BRA
Identifier token: a
Token: KET
Token: SEMI_COLON
Token: NEWLINE
Token: END_IF
Token: WHILE
Identifier token: a
Token: LESS_THAN
Integer token:  14
Token: END_DO
Token: SEMI_COLON
Integer token:  0
Token: ASSIGNMENT
Identifier token: a
Token: SEMI_COLON
Token: WHILE
Identifier token: a
Token: LESS_THAN
Integer token:  12
Token: DO
Token: WRITE
Token: BRA
Identifier token: a
Token: KET
Token: SEMI_COLON
Identifier token: a
Token: ADD
Integer token:  1
Token: ASSIGNMENT
Identifier token: a
Token: END_WHILE
Token: SEMI_COLON
Token: NEWLINE
Token: ENDP
Identifier token: Prog3
Token: FULL_STOP
--13/11/2017----------------------------------------------------- 
Lexical Tokens for d.spl 
--13:43:26.42----------------------------------------------------- 
Identifier token: Prog4D
Token: COLON
Token: DECLARATIONS
Identifier token: r1
Token: COMMA
Identifier token: r2
Token: COMMA
Identifier token: r3
Token: OF
Token: TYPE
Token: REAL
Token: SEMI_COLON
Token: CODE
Token: MINUS
Real token: 2.400000
Token: ASSIGNMENT
Identifier token: r1
Token: SEMI_COLON
Token: MINUS
Real token: 34.989000
Token: ASSIGNMENT
Identifier token: r2
Token: SEMI_COLON
Identifier token: r1
Token: MULTIPLY
Identifier token: r2
Token: DIVIDE
Real token: 7.400000
Token: ASSIGNMENT
Identifier token: r3
Token: SEMI_COLON
Token: WRITE
Token: BRA
Identifier token: r3
Token: KET
Token: SEMI_COLON
Token: NEWLINE
Token: SEMI_COLON
Token: READ
Token: BRA
Identifier token: r1
Token: KET
Token: SEMI_COLON
Identifier token: r1
Token: ADD
Identifier token: r3
Token: ASSIGNMENT
Identifier token: r3
Token: SEMI_COLON
Token: WRITE
Token: BRA
Identifier token: r3
Token: KET
Token: SEMI_COLON
Token: NEWLINE
Token: ENDP
Identifier token: Prog4D
Token: FULL_STOP
--13/11/2017----------------------------------------------------- 
Lexical Tokens for e.spl 
--13:43:27.02----------------------------------------------------- 
Identifier token: ProgV
Token: COLON
Token: DECLARATIONS
Identifier token: integer
Token: COMMA
Identifier token: i
Token: OF
Token: TYPE
Token: INTEGER
Token: SEMI_COLON
Token: CODE
Token: READ
Token: BRA
Identifier token: integer
Token: KET
Token: SEMI_COLON
Token: IF
Identifier token: integer
Token: LESS_THAN_EQUAL_TO
Integer token:  5
Token: OR
Identifier token: integer
Token: GREATER_THAN_EQUAL_TO
Integer token:  12
Token: THEN
Token: WRITE
Token: BRA
Identifier token: integer
Token: KET
Token: END_IF
Token: SEMI_COLON
Token: WRITE
Token: BRA
Token: BRA
Integer token:  36
Token: MINUS
Integer token:  1
Token: KET
Token: KET
Token: SEMI_COLON
Token: NEWLINE
Token: SEMI_COLON
Token: FOR
Identifier token: integer
Token: IS
Token: MINUS
Integer token:  1
Token: BY
Token: MINUS
Integer token:  1
Token: TO
Token: MINUS
Integer token:  5
Token: DO
Token: WRITE
Token: BRA
Identifier token: integer
Token: KET
Token: SEMI_COLON
Token: NEWLINE
Token: END_FOR
Token: SEMI_COLON
Token: MINUS
Integer token:  1
Token: ASSIGNMENT
Identifier token: i
Token: SEMI_COLON
Token: FOR
Identifier token: integer
Token: IS
Identifier token: i
Token: MULTIPLY
Identifier token: i
Token: MULTIPLY
Identifier token: i
Token: BY
Identifier token: i
Token: MULTIPLY
Identifier token: i
Token: MULTIPLY
Identifier token: i
Token: MULTIPLY
Identifier token: i
Token: MULTIPLY
Identifier token: i
Token: TO
Identifier token: i
Token: MULTIPLY
Identifier token: i
Token: MULTIPLY
Token: BRA
Identifier token: i
Token: ADD
Identifier token: i
Token: ADD
Identifier token: i
Token: ADD
Identifier token: i
Token: ADD
Identifier token: i
Token: KET
Token: DO
Token: WRITE
Token: BRA
Identifier token: integer
Token: KET
Token: SEMI_COLON
Token: NEWLINE
Token: END_FOR
Token: ENDP
Identifier token: ProgV
Token: FULL_STOP
--13/11/2017----------------------------------------------------- 
Parse debug output for a.spl 
--13:43:30.18----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 1
Reading a token: Next token is token COLON_T ()
Shifting token COLON_T ()
Entering state 3
Reading a token: Next token is token CODE_T ()
Shifting token CODE_T ()
Entering state 6
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 14
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 48
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 19
Reducing stack by rule 29 (line 304):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm character_constant ()
Stack now 0 1 3 6 14 48
Entering state 33
Reducing stack by rule 28 (line 298):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 14 48
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 6 14 48
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 6 14 48
Entering state 78
Reading a token: Next token is token COMMA_T ()
Reducing stack by rule 26 (line 286):
   $1 = nterm term ()
-> $$ = nterm output_block ()
Stack now 0 1 3 6 14 48
Entering state 77
Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 100
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 19
Reducing stack by rule 29 (line 304):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm character_constant ()
Stack now 0 1 3 6 14 48 77 100
Entering state 33
Reducing stack by rule 28 (line 298):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 14 48 77 100
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 6 14 48 77 100
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 6 14 48 77 100
Entering state 109
Reading a token: Next token is token COMMA_T ()
Reducing stack by rule 25 (line 282):
   $1 = nterm output_block ()
   $2 = token COMMA_T ()
   $3 = nterm term ()
-> $$ = nterm output_block ()
Stack now 0 1 3 6 14 48
Entering state 77
Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 100
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 19
Reducing stack by rule 29 (line 304):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm character_constant ()
Stack now 0 1 3 6 14 48 77 100
Entering state 33
Reducing stack by rule 28 (line 298):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 14 48 77 100
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 6 14 48 77 100
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 6 14 48 77 100
Entering state 109
Reading a token: Next token is token COMMA_T ()
Reducing stack by rule 25 (line 282):
   $1 = nterm output_block ()
   $2 = token COMMA_T ()
   $3 = nterm term ()
-> $$ = nterm output_block ()
Stack now 0 1 3 6 14 48
Entering state 77
Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 100
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 19
Reducing stack by rule 29 (line 304):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm character_constant ()
Stack now 0 1 3 6 14 48 77 100
Entering state 33
Reducing stack by rule 28 (line 298):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 14 48 77 100
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 6 14 48 77 100
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 6 14 48 77 100
Entering state 109
Reading a token: Next token is token COMMA_T ()
Reducing stack by rule 25 (line 282):
   $1 = nterm output_block ()
   $2 = token COMMA_T ()
   $3 = nterm term ()
-> $$ = nterm output_block ()
Stack now 0 1 3 6 14 48
Entering state 77
Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 100
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 19
Reducing stack by rule 29 (line 304):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm character_constant ()
Stack now 0 1 3 6 14 48 77 100
Entering state 33
Reducing stack by rule 28 (line 298):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 14 48 77 100
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 6 14 48 77 100
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 6 14 48 77 100
Entering state 109
Reading a token: Next token is token KET_T ()
Reducing stack by rule 25 (line 282):
   $1 = nterm output_block ()
   $2 = token COMMA_T ()
   $3 = nterm term ()
-> $$ = nterm output_block ()
Stack now 0 1 3 6 14 48
Entering state 77
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 99
Reducing stack by rule 16 (line 232):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm output_block ()
   $4 = token KET_T ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6
Entering state 26
Reducing stack by rule 9 (line 200):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 54
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 17
Reducing stack by rule 17 (line 236):
   $1 = token NEWLINE_T ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 24 54
Entering state 26
Reducing stack by rule 9 (line 200):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 24 54
Entering state 24
Reading a token: Next token is token ENDP_T ()
Reducing stack by rule 7 (line 190):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 6 24 54
Entering state 82
Reducing stack by rule 6 (line 186):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 6
Entering state 23
Reducing stack by rule 3 (line 166):
   $1 = token CODE_T ()
   $2 = nterm statement_block ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_T ()
Shifting token ENDP_T ()
Entering state 38
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 60
Reading a token: Next token is token FULL_STOP_T ()
Shifting token FULL_STOP_T ()
Entering state 88
Reducing stack by rule 1 (line 143):
   $1 = token ID_T ()
   $2 = token COLON_T ()
   $3 = nterm block ()
   $4 = token ENDP_T ()
   $5 = token ID_T ()
   $6 = token FULL_STOP_T ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--13/11/2017----------------------------------------------------- 
Parse debug output for b.spl 
--13:43:30.90----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 1
Reading a token: Next token is token COLON_T ()
Shifting token COLON_T ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_T ()
Shifting token DECLARATIONS_T ()
Entering state 5
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token COMMA_T ()
Error : Exiting syntax error
Error: popping token ID_T ()
Stack now 0 1 3 5
Error: popping token DECLARATIONS_T ()
Stack now 0 1 3
Error: popping token COLON_T ()
Stack now 0 1
Error: popping token ID_T ()
Stack now 0
Cleanup: discarding lookahead token COMMA_T ()
Stack now 0
--13/11/2017----------------------------------------------------- 
Parse debug output for c.spl 
--13:43:31.51----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 1
Reading a token: Next token is token COLON_T ()
Shifting token COLON_T ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_T ()
Shifting token DECLARATIONS_T ()
Entering state 5
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token OF_T ()
Shifting token OF_T ()
Entering state 39
Reading a token: Next token is token TYPE_T ()
Shifting token TYPE_T ()
Entering state 61
Reading a token: Next token is token INTEGER_T ()
Shifting token INTEGER_T ()
Entering state 90
Reducing stack by rule 54 (line 422):
   $1 = token INTEGER_T ()
-> $$ = nterm type ()
Stack now 0 1 3 5 8 39 61
Entering state 92
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 104
Reading a token: Next token is token CODE_T ()
Reducing stack by rule 4 (line 173):
   $1 = token ID_T ()
   $2 = token OF_T ()
   $3 = token TYPE_T ()
   $4 = nterm type ()
   $5 = token SEMI_COLON_T ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5
Entering state 9
Next token is token CODE_T ()
Shifting token CODE_T ()
Entering state 40
Reading a token: Next token is token FOR_T ()
Shifting token FOR_T ()
Entering state 13
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 46
Reading a token: Next token is token IS_T ()
Shifting token IS_T ()
Entering state 75
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 13 46 75
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 13 46 75
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 13 46 75
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 13 46 75
Entering state 36
Reading a token: Next token is token BY_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 13 46 75
Entering state 97
Next token is token BY_T ()
Shifting token BY_T ()
Entering state 107
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 13 46 75 97 107
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 13 46 75 97 107
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 13 46 75 97 107
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 13 46 75 97 107
Entering state 36
Reading a token: Next token is token TO_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 13 46 75 97 107
Entering state 114
Next token is token TO_T ()
Shifting token TO_T ()
Entering state 116
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 13 46 75 97 107 114 116
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 13 46 75 97 107 114 116
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 13 46 75 97 107 114 116
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 13 46 75 97 107 114 116
Entering state 36
Reading a token: Next token is token DO_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 13 46 75 97 107 114 116
Entering state 117
Next token is token DO_T ()
Reducing stack by rule 24 (line 276):
   $1 = token ID_T ()
   $2 = token IS_T ()
   $3 = nterm expr ()
   $4 = token BY_T ()
   $5 = nterm expr ()
   $6 = token TO_T ()
   $7 = nterm expr ()
-> $$ = nterm for_body ()
Stack now 0 1 3 5 9 40 13
Entering state 47
Next token is token DO_T ()
Shifting token DO_T ()
Entering state 76
Reading a token: Next token is token IF_T ()
Shifting token IF_T ()
Entering state 12
Reading a token: Next token is token NOT_T ()
Shifting token NOT_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 51 (line 408):
   $1 = token ID_T ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 13 47 76 12 42
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 13 47 76 12 42
Entering state 36
Reading a token: Next token is token EQUAL_TO_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 13 47 76 12 42
Entering state 45
Next token is token EQUAL_TO_T ()
Shifting token EQUAL_TO_T ()
Entering state 68
Reducing stack by rule 39 (line 353):
   $1 = token EQUAL_TO_T ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 13 47 76 12 42 45
Entering state 74
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 13 47 76 12 42 45 74
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 13 47 76 12 42 45 74
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 13 47 76 12 42 45 74
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 13 47 76 12 42 45 74
Entering state 36
Reading a token: Next token is token THEN_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 13 47 76 12 42 45 74
Entering state 96
Next token is token THEN_T ()
Reducing stack by rule 37 (line 342):
   $1 = nterm expr ()
   $2 = nterm comparator ()
   $3 = nterm expr ()
-> $$ = nterm conditional_body ()
Stack now 0 1 3 5 9 40 13 47 76 12 42
Entering state 64
Reducing stack by rule 38 (line 346):
   $1 = token NOT_T ()
   $2 = nterm conditional_body ()
-> $$ = nterm conditional_body ()
Stack now 0 1 3 5 9 40 13 47 76 12
Entering state 44
Next token is token THEN_T ()
Reducing stack by rule 34 (line 328):
   $1 = nterm conditional_body ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 13 47 76 12
Entering state 43
Next token is token THEN_T ()
Shifting token THEN_T ()
Entering state 65
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 14
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 48
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 51 (line 408):
   $1 = token ID_T ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 13 47 76 12 43 65 14 48
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 13 47 76 12 43 65 14 48
Entering state 78
Reading a token: Next token is token KET_T ()
Reducing stack by rule 26 (line 286):
   $1 = nterm term ()
-> $$ = nterm output_block ()
Stack now 0 1 3 5 9 40 13 47 76 12 43 65 14 48
Entering state 77
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 99
Reducing stack by rule 16 (line 232):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm output_block ()
   $4 = token KET_T ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 13 47 76 12 43 65
Entering state 26
Reducing stack by rule 9 (line 200):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 13 47 76 12 43 65
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 54
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 17
Reducing stack by rule 17 (line 236):
   $1 = token NEWLINE_T ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 13 47 76 12 43 65 24 54
Entering state 26
Reducing stack by rule 9 (line 200):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 13 47 76 12 43 65 24 54
Entering state 24
Reading a token: Next token is token END_IF_T ()
Reducing stack by rule 7 (line 190):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 13 47 76 12 43 65 24 54
Entering state 82
Reducing stack by rule 6 (line 186):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 13 47 76 12 43 65
Entering state 93
Next token is token END_IF_T ()
Shifting token END_IF_T ()
Entering state 106
Reducing stack by rule 19 (line 248):
   $1 = token IF_T ()
   $2 = nterm conditional ()
   $3 = token THEN_T ()
   $4 = nterm statement_block ()
   $5 = token END_IF_T ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 5 9 40 13 47 76
Entering state 28
Reducing stack by rule 11 (line 208):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 13 47 76
Entering state 24
Reading a token: Next token is token END_FOR_T ()
Reducing stack by rule 7 (line 190):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 13 47 76
Entering state 98
Next token is token END_FOR_T ()
Shifting token END_FOR_T ()
Entering state 108
Reducing stack by rule 23 (line 270):
   $1 = token FOR_T ()
   $2 = nterm for_body ()
   $3 = token DO_T ()
   $4 = nterm statement_block ()
   $5 = token END_FOR_T ()
-> $$ = nterm for_statement ()
Stack now 0 1 3 5 9 40
Entering state 31
Reducing stack by rule 14 (line 220):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 54
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 24 54
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 24 54
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54
Entering state 36
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54
Entering state 35
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 55
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 83
Reducing stack by rule 15 (line 226):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 24 54
Entering state 25
Reducing stack by rule 8 (line 196):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 54
Reading a token: Next token is token DO_T ()
Shifting token DO_T ()
Entering state 22
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 51 (line 408):
   $1 = token ID_T ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 22
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 22
Entering state 36
Reading a token: Next token is token ADD_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 22
Entering state 35
Next token is token ADD_T ()
Shifting token ADD_T ()
Entering state 56
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 35 56
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 35 56
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 35 56
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 35 56
Entering state 84
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 46 (line 383):
   $1 = nterm expr ()
   $2 = token ADD_T ()
   $3 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 22
Entering state 35
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 55
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 83
Reducing stack by rule 15 (line 226):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 22
Entering state 25
Reducing stack by rule 8 (line 196):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 22
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 54
Reading a token: Next token is token IF_T ()
Shifting token IF_T ()
Entering state 12
Reading a token: Next token is token NOT_T ()
Shifting token NOT_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 51 (line 408):
   $1 = token ID_T ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 42
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 42
Entering state 36
Reading a token: Next token is token EQUAL_TO_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 42
Entering state 45
Next token is token EQUAL_TO_T ()
Shifting token EQUAL_TO_T ()
Entering state 68
Reducing stack by rule 39 (line 353):
   $1 = token EQUAL_TO_T ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 42 45
Entering state 74
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 42 45 74
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 42 45 74
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 42 45 74
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 42 45 74
Entering state 36
Reading a token: Next token is token AND_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 42 45 74
Entering state 96
Next token is token AND_T ()
Reducing stack by rule 37 (line 342):
   $1 = nterm expr ()
   $2 = nterm comparator ()
   $3 = nterm expr ()
-> $$ = nterm conditional_body ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 42
Entering state 64
Reducing stack by rule 38 (line 346):
   $1 = token NOT_T ()
   $2 = nterm conditional_body ()
-> $$ = nterm conditional_body ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12
Entering state 44
Next token is token AND_T ()
Shifting token AND_T ()
Entering state 66
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 51 (line 408):
   $1 = token ID_T ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66
Entering state 36
Reading a token: Next token is token NOT_EQUAL_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66
Entering state 45
Next token is token NOT_EQUAL_T ()
Shifting token NOT_EQUAL_T ()
Entering state 69
Reducing stack by rule 40 (line 357):
   $1 = token NOT_EQUAL_T ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66 45
Entering state 74
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66 45 74
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66 45 74
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66 45 74
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66 45 74
Entering state 36
Reading a token: Next token is token THEN_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66 45 74
Entering state 96
Next token is token THEN_T ()
Reducing stack by rule 37 (line 342):
   $1 = nterm expr ()
   $2 = nterm comparator ()
   $3 = nterm expr ()
-> $$ = nterm conditional_body ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66
Entering state 44
Next token is token THEN_T ()
Reducing stack by rule 34 (line 328):
   $1 = nterm conditional_body ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 44 66
Entering state 94
Reducing stack by rule 36 (line 336):
   $1 = nterm conditional_body ()
   $2 = token AND_T ()
   $3 = nterm conditional ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12
Entering state 43
Next token is token THEN_T ()
Shifting token THEN_T ()
Entering state 65
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 14
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 48
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 51 (line 408):
   $1 = token ID_T ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 43 65 14 48
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 43 65 14 48
Entering state 78
Reading a token: Next token is token KET_T ()
Reducing stack by rule 26 (line 286):
   $1 = nterm term ()
-> $$ = nterm output_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 43 65 14 48
Entering state 77
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 99
Reducing stack by rule 16 (line 232):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm output_block ()
   $4 = token KET_T ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 43 65
Entering state 26
Reducing stack by rule 9 (line 200):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 43 65
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 54
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 17
Reducing stack by rule 17 (line 236):
   $1 = token NEWLINE_T ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 43 65 24 54
Entering state 26
Reducing stack by rule 9 (line 200):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 43 65 24 54
Entering state 24
Reading a token: Next token is token END_IF_T ()
Reducing stack by rule 7 (line 190):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 43 65 24 54
Entering state 82
Reducing stack by rule 6 (line 186):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54 12 43 65
Entering state 93
Next token is token END_IF_T ()
Shifting token END_IF_T ()
Entering state 106
Reducing stack by rule 19 (line 248):
   $1 = token IF_T ()
   $2 = nterm conditional ()
   $3 = token THEN_T ()
   $4 = nterm statement_block ()
   $5 = token END_IF_T ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54
Entering state 28
Reducing stack by rule 11 (line 208):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54
Entering state 24
Reading a token: Next token is token WHILE_T ()
Reducing stack by rule 7 (line 190):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 24 54
Entering state 82
Reducing stack by rule 6 (line 186):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 22
Entering state 53
Next token is token WHILE_T ()
Shifting token WHILE_T ()
Entering state 81
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 51 (line 408):
   $1 = token ID_T ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81
Entering state 36
Reading a token: Next token is token LESS_THAN_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81
Entering state 45
Next token is token LESS_THAN_T ()
Shifting token LESS_THAN_T ()
Entering state 70
Reducing stack by rule 41 (line 361):
   $1 = token LESS_THAN_T ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81 45
Entering state 74
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81 45 74
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81 45 74
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81 45 74
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81 45 74
Entering state 36
Reading a token: Next token is token END_DO_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81 45 74
Entering state 96
Next token is token END_DO_T ()
Reducing stack by rule 37 (line 342):
   $1 = nterm expr ()
   $2 = nterm comparator ()
   $3 = nterm expr ()
-> $$ = nterm conditional_body ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81
Entering state 44
Next token is token END_DO_T ()
Reducing stack by rule 34 (line 328):
   $1 = nterm conditional_body ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 24 54 24 54 22 53 81
Entering state 103
Next token is token END_DO_T ()
Shifting token END_DO_T ()
Entering state 111
Reducing stack by rule 21 (line 258):
   $1 = token DO_T ()
   $2 = nterm statement_block ()
   $3 = token WHILE_T ()
   $4 = nterm conditional ()
   $5 = token END_DO_T ()
-> $$ = nterm do_statement ()
Stack now 0 1 3 5 9 40 24 54 24 54
Entering state 29
Reducing stack by rule 12 (line 212):
   $1 = nterm do_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54 24 54
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 54
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54
Entering state 36
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54
Entering state 35
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 55
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 83
Reducing stack by rule 15 (line 226):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54
Entering state 25
Reducing stack by rule 8 (line 196):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 54
Reading a token: Next token is token WHILE_T ()
Shifting token WHILE_T ()
Entering state 16
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 51 (line 408):
   $1 = token ID_T ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16
Entering state 36
Reading a token: Next token is token LESS_THAN_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16
Entering state 45
Next token is token LESS_THAN_T ()
Shifting token LESS_THAN_T ()
Entering state 70
Reducing stack by rule 41 (line 361):
   $1 = token LESS_THAN_T ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 45
Entering state 74
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 45 74
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 45 74
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 45 74
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 45 74
Entering state 36
Reading a token: Next token is token DO_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 45 74
Entering state 96
Next token is token DO_T ()
Reducing stack by rule 37 (line 342):
   $1 = nterm expr ()
   $2 = nterm comparator ()
   $3 = nterm expr ()
-> $$ = nterm conditional_body ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16
Entering state 44
Next token is token DO_T ()
Reducing stack by rule 34 (line 328):
   $1 = nterm conditional_body ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16
Entering state 50
Next token is token DO_T ()
Shifting token DO_T ()
Entering state 80
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 14
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 48
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 51 (line 408):
   $1 = token ID_T ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 14 48
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 14 48
Entering state 78
Reading a token: Next token is token KET_T ()
Reducing stack by rule 26 (line 286):
   $1 = nterm term ()
-> $$ = nterm output_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 14 48
Entering state 77
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 99
Reducing stack by rule 16 (line 232):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm output_block ()
   $4 = token KET_T ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80
Entering state 26
Reducing stack by rule 9 (line 200):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 54
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 51 (line 408):
   $1 = token ID_T ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54
Entering state 36
Reading a token: Next token is token ADD_T ()
Reducing stack by rule 45 (line 379):
   $1 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54
Entering state 35
Next token is token ADD_T ()
Shifting token ADD_T ()
Entering state 56
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 20
Reducing stack by rule 30 (line 310):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54 35 56
Entering state 34
Reducing stack by rule 27 (line 294):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54 35 56
Entering state 32
Reducing stack by rule 52 (line 412):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54 35 56
Entering state 37
Reducing stack by rule 48 (line 394):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54 35 56
Entering state 84
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 46 (line 383):
   $1 = nterm expr ()
   $2 = token ADD_T ()
   $3 = nterm term ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54
Entering state 35
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 55
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 83
Reducing stack by rule 15 (line 226):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54
Entering state 25
Reducing stack by rule 8 (line 196):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54
Entering state 24
Reading a token: Next token is token END_WHILE_T ()
Reducing stack by rule 7 (line 190):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80 24 54
Entering state 82
Reducing stack by rule 6 (line 186):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 16 50 80
Entering state 102
Next token is token END_WHILE_T ()
Shifting token END_WHILE_T ()
Entering state 110
Reducing stack by rule 22 (line 264):
   $1 = token WHILE_T ()
   $2 = nterm conditional ()
   $3 = token DO_T ()
   $4 = nterm statement_block ()
   $5 = token END_WHILE_T ()
-> $$ = nterm while_statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54
Entering state 30
Reducing stack by rule 13 (line 216):
   $1 = nterm while_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 54
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 17
Reducing stack by rule 17 (line 236):
   $1 = token NEWLINE_T ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 24 54
Entering state 26
Reducing stack by rule 9 (line 200):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 24 54
Entering state 24
Reading a token: Next token is token ENDP_T ()
Reducing stack by rule 7 (line 190):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54 24 54
Entering state 82
Reducing stack by rule 6 (line 186):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54 24 54
Entering state 82
Reducing stack by rule 6 (line 186):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54 24 54 24 54
Entering state 82
Reducing stack by rule 6 (line 186):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54 24 54
Entering state 82
Reducing stack by rule 6 (line 186):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40 24 54
Entering state 82
Reducing stack by rule 6 (line 186):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 40
Entering state 62
Reducing stack by rule 2 (line 162):
   $1 = token DECLARATIONS_T ()
   $2 = nterm declarations ()
   $3 = token CODE_T ()
   $4 = nterm statement_block ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_T ()
Shifting token ENDP_T ()
Entering state 38
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 60
Reading a token: Next token is token FULL_STOP_T ()
Shifting token FULL_STOP_T ()
Entering state 88
Reducing stack by rule 1 (line 143):
   $1 = token ID_T ()
   $2 = token COLON_T ()
   $3 = nterm block ()
   $4 = token ENDP_T ()
   $5 = token ID_T ()
   $6 = token FULL_S--13/11/2017----------------------------------------------------- 
Parse debug output for d.spl 
--13:43:40.94----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 1
Reading a token: Next token is token COLON_T ()
Shifting token COLON_T ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_T ()
Shifting token DECLARATIONS_T ()
Entering state 5
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token COMMA_T ()
Error : Exiting syntax error
Error: popping token ID_T ()
Stack now 0 1 3 5
Error: popping token DECLARATIONS_T ()
Stack now 0 1 3
Error: popping token COLON_T ()
Stack now 0 1
Error: popping token ID_T ()
Stack now 0
Cleanup: discarding lookahead token COMMA_T ()
Stack now 0
--13/11/2017----------------------------------------------------- 
Parse debug output for e.spl 
--13:43:41.72----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 1
Reading a token: Next token is token COLON_T ()
Shifting token COLON_T ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_T ()
Shifting token DECLARATIONS_T ()
Entering state 5
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token COMMA_T ()
Error : Exiting syntax error
Error: popping token ID_T ()
Stack now 0 1 3 5
Error: popping token DECLARATIONS_T ()
Stack now 0 1 3
Error: popping token COLON_T ()
Stack now 0 1
Error: popping token ID_T ()
Stack now 0
Cleanup: discarding lookahead token COMMA_T ()
Stack now 0
--13/11/2017----------------------------------------------------- 
Parse Tree output for a.spl 
--13:43:45.63----------------------------------------------------- 
 Item: 0  nodeIdentifier: PROGRAM
   nodeIdentifier: BLOCK
     nodeIdentifier: STATEMENT_BLOCK
       Item: 6  nodeIdentifier: STATEMENT
         nodeIdentifier: WRITE_STATEMENT
           nodeIdentifier: OUTPUT_BLOCK
             nodeIdentifier: OUTPUT_BLOCK
               nodeIdentifier: OUTPUT_BLOCK
                 nodeIdentifier: OUTPUT_BLOCK
                   nodeIdentifier: OUTPUT_BLOCK
                     nodeIdentifier: TERM
                       nodeIdentifier: FACTOR_CONSTANT
                         Item: 16  nodeIdentifier: CONSTANT
                   nodeIdentifier: TERM
                     nodeIdentifier: FACTOR_CONSTANT
                       Item: 16  nodeIdentifier: CONSTANT
                 nodeIdentifier: TERM
                   nodeIdentifier: FACTOR_CONSTANT
                     Item: 16  nodeIdentifier: CONSTANT
               nodeIdentifier: TERM
                 nodeIdentifier: FACTOR_CONSTANT
                   Item: 16  nodeIdentifier: CONSTANT
             nodeIdentifier: TERM
               nodeIdentifier: FACTOR_CONSTANT
                 Item: 16  nodeIdentifier: CONSTANT
       nodeIdentifier: STATEMENT_BLOCK
         Item: 6  nodeIdentifier: STATEMENT
           nodeIdentifier: NEWLINE
--13/11/2017----------------------------------------------------- 
Parse Tree output for b.spl 
--13:43:46.34----------------------------------------------------- 
Error : Exiting syntax error
--13/11/2017----------------------------------------------------- 
Parse Tree output for c.spl 
--13:43:47.00----------------------------------------------------- 
--13/11/2017----------------------------------------------------- 
Parse Tree output for d.spl 
--13:43:50.01----------------------------------------------------- 
Error : Exiting syntax error
--13/11/2017----------------------------------------------------- 
Parse Tree output for e.spl 
--13:43:50.74----------------------------------------------------- 
Error : Exiting syntax error
