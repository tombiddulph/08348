--19/11/2017----------------------------------------------------- 
Lexical Tokens for a.spl 
--17:47:14.93----------------------------------------------------- 
Sybol: (ID) -> ProgA
Token: (COLON) -> :
Token: (CODE) -> CODE
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (CHARACTER_CONSTANT) -> 'h'
Token: (COMMA) -> ,
Sybol: (CHARACTER_CONSTANT) -> 'e'
Token: (COMMA) -> ,
Sybol: (CHARACTER_CONSTANT) -> 'l'
Token: (COMMA) -> ,
Sybol: (CHARACTER_CONSTANT) -> 'l'
Token: (COMMA) -> ,
Sybol: (CHARACTER_CONSTANT) -> 'o'
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (ENDP) -> ENDP
Sybol: (ID) -> ProgA
Token: (FULL_STOP) -> .
--19/11/2017----------------------------------------------------- 
Lexical Tokens for b.spl 
--17:49:04.22----------------------------------------------------- 
Sybol: (ID) -> ProgB
Token: (COLON) -> :
Token: (DECLARATIONS) -> DECLARATIONS
Sybol: (ID) -> a
Token: (COMMA) -> ,
Sybol: (ID) -> b
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (INTEGER) -> INTEGER
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> c
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (CHARACTER) -> CHARACTER
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> d
Token: (COMMA) -> ,
Sybol: (ID) -> e
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (REAL) -> REAL
Token: (SEMI_COLON) -> ;
Token: (CODE) -> CODE
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> a
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> b
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (IF) -> IF
Sybol: (ID) -> a
Token: (GREATER_THAN) -> >
Sybol: (ID) -> b
Token: (THEN) -> THEN
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (CHARACTER_CONSTANT) -> 'A'
Token: (KET) -> )
Token: (ELSE) -> ELSE
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (CHARACTER_CONSTANT) -> 'B'
Token: (KET) -> )
Token: (END_IF) -> ENDIF
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (SEMI_COLON) -> ;
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> d
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> d
Token: (MULTIPLY) -> *
Sybol: (REAL_CONSTANT) -> 2.3
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> e
Token: (SEMI_COLON) -> ;
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> e
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (SEMI_COLON) -> ;
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> c
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> c
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (ENDP) -> ENDP
Sybol: (ID) -> ProgB
Token: (FULL_STOP) -> .
--19/11/2017----------------------------------------------------- 
Lexical Tokens for c.spl 
--17:49:08.15----------------------------------------------------- 
Sybol: (ID) -> Prog3
Token: (COLON) -> :
Token: (DECLARATIONS) -> DECLARATIONS
Sybol: (ID) -> a
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (INTEGER) -> INTEGER
Token: (SEMI_COLON) -> ;
Token: (CODE) -> CODE
Token: (FOR) -> FOR
Sybol: (ID) -> a
Token: (IS) -> IS
Sybol: (INTEGER_CONSTANT) -> 1
Token: (BY) -> BY
Sybol: (INTEGER_CONSTANT) -> 1
Token: (TO) -> TO
Sybol: (INTEGER_CONSTANT) -> 13
Token: (DO) -> DO
Token: (IF) -> IF
Token: (NOT) -> NOT
Sybol: (ID) -> a
Token: (EQUAL_TO) -> =
Sybol: (INTEGER_CONSTANT) -> 7
Token: (THEN) -> THEN
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> a
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (END_IF) -> ENDIF
Token: (END_FOR) -> ENDFOR
Token: (SEMI_COLON) -> ;
Sybol: (INTEGER_CONSTANT) -> 0
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> a
Token: (SEMI_COLON) -> ;
Token: (DO) -> DO
Sybol: (ID) -> a
Token: (ADD) -> +
Sybol: (INTEGER_CONSTANT) -> 1
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> a
Token: (SEMI_COLON) -> ;
Token: (IF) -> IF
Token: (NOT) -> NOT
Sybol: (ID) -> a
Token: (EQUAL_TO) -> =
Sybol: (INTEGER_CONSTANT) -> 6
Token: (AND) -> AND
Sybol: (ID) -> a
Token: (NOT_EQUAL) -> <>
Sybol: (INTEGER_CONSTANT) -> 8
Token: (THEN) -> THEN
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> a
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (END_IF) -> ENDIF
Token: (WHILE) -> WHILE
Sybol: (ID) -> a
Token: (LESS_THAN) -> <
Sybol: (INTEGER_CONSTANT) -> 14
Token: (END_DO) -> ENDDO
Token: (SEMI_COLON) -> ;
Sybol: (INTEGER_CONSTANT) -> 0
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> a
Token: (SEMI_COLON) -> ;
Token: (WHILE) -> WHILE
Sybol: (ID) -> a
Token: (LESS_THAN) -> <
Sybol: (INTEGER_CONSTANT) -> 12
Token: (DO) -> DO
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> a
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> a
Token: (ADD) -> +
Sybol: (INTEGER_CONSTANT) -> 1
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> a
Token: (END_WHILE) -> ENDWHILE
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (ENDP) -> ENDP
Sybol: (ID) -> Prog3
Token: (FULL_STOP) -> .
--19/11/2017----------------------------------------------------- 
Lexical Tokens for d.spl 
--17:49:09.54----------------------------------------------------- 
Sybol: (ID) -> Prog4D
Token: (COLON) -> :
Token: (DECLARATIONS) -> DECLARATIONS
Sybol: (ID) -> r1
Token: (COMMA) -> ,
Sybol: (ID) -> r2
Token: (COMMA) -> ,
Sybol: (ID) -> r3
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (REAL) -> REAL
Token: (SEMI_COLON) -> ;
Token: (CODE) -> CODE
Token: (MINUS) -> -
Sybol: (REAL_CONSTANT) -> 2.4
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> r1
Token: (SEMI_COLON) -> ;
Token: (MINUS) -> -
Sybol: (REAL_CONSTANT) -> 34.989
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> r2
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> r1
Token: (MULTIPLY) -> *
Sybol: (ID) -> r2
Token: (DIVIDE) -> /
Sybol: (REAL_CONSTANT) -> 7.4
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> r3
Token: (SEMI_COLON) -> ;
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> r3
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (SEMI_COLON) -> ;
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> r1
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> r1
Token: (ADD) -> +
Sybol: (ID) -> r3
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> r3
Token: (SEMI_COLON) -> ;
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> r3
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (ENDP) -> ENDP
Sybol: (ID) -> Prog4D
Token: (FULL_STOP) -> .
--19/11/2017----------------------------------------------------- 
Lexical Tokens for e.spl 
--17:49:10.96----------------------------------------------------- 
Sybol: (ID) -> ProgV
Token: (COLON) -> :
Token: (DECLARATIONS) -> DECLARATIONS
Sybol: (ID) -> integer
Token: (COMMA) -> ,
Sybol: (ID) -> i
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (INTEGER) -> INTEGER
Token: (SEMI_COLON) -> ;
Token: (CODE) -> CODE
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> integer
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (IF) -> IF
Sybol: (ID) -> integer
Token: (LESS_THAN_EQUAL_TO) -> <=
Sybol: (INTEGER_CONSTANT) -> 5
Token: (OR) -> OR
Sybol: (ID) -> integer
Token: (GREATER_THAN_EQUAL_TO) -> >=
Sybol: (INTEGER_CONSTANT) -> 12
Token: (THEN) -> THEN
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> integer
Token: (KET) -> )
Token: (END_IF) -> ENDIF
Token: (SEMI_COLON) -> ;
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Token: (BRA) -> (
Sybol: (INTEGER_CONSTANT) -> 36
Token: (MINUS) -> -
Sybol: (INTEGER_CONSTANT) -> 1
Token: (KET) -> )
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (SEMI_COLON) -> ;
Token: (FOR) -> FOR
Sybol: (ID) -> integer
Token: (IS) -> IS
Token: (MINUS) -> -
Sybol: (INTEGER_CONSTANT) -> 1
Token: (BY) -> BY
Token: (MINUS) -> -
Sybol: (INTEGER_CONSTANT) -> 1
Token: (TO) -> TO
Token: (MINUS) -> -
Sybol: (INTEGER_CONSTANT) -> 5
Token: (DO) -> DO
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> integer
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (END_FOR) -> ENDFOR
Token: (SEMI_COLON) -> ;
Token: (MINUS) -> -
Sybol: (INTEGER_CONSTANT) -> 1
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> i
Token: (SEMI_COLON) -> ;
Token: (FOR) -> FOR
Sybol: (ID) -> integer
Token: (IS) -> IS
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (BY) -> BY
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (TO) -> TO
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Token: (BRA) -> (
Sybol: (ID) -> i
Token: (ADD) -> +
Sybol: (ID) -> i
Token: (ADD) -> +
Sybol: (ID) -> i
Token: (ADD) -> +
Sybol: (ID) -> i
Token: (ADD) -> +
Sybol: (ID) -> i
Token: (KET) -> )
Token: (DO) -> DO
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> integer
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (END_FOR) -> ENDFOR
Token: (ENDP) -> ENDP
Sybol: (ID) -> ProgV
Token: (FULL_STOP) -> .
