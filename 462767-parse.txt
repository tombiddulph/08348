--19/11/2017----------------------------------------------------- 
Lexical Tokens for a.spl 
--17:47:14.93----------------------------------------------------- 
Sybol: (ID) -> ProgA
Token: (COLON) -> :
Token: (CODE) -> CODE
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (CHARACTER_CONSTANT) -> 'h'
Token: (COMMA) -> ,
Sybol: (CHARACTER_CONSTANT) -> 'e'
Token: (COMMA) -> ,
Sybol: (CHARACTER_CONSTANT) -> 'l'
Token: (COMMA) -> ,
Sybol: (CHARACTER_CONSTANT) -> 'l'
Token: (COMMA) -> ,
Sybol: (CHARACTER_CONSTANT) -> 'o'
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (ENDP) -> ENDP
Sybol: (ID) -> ProgA
Token: (FULL_STOP) -> .
--19/11/2017----------------------------------------------------- 
Lexical Tokens for b.spl 
--17:49:04.22----------------------------------------------------- 
Sybol: (ID) -> ProgB
Token: (COLON) -> :
Token: (DECLARATIONS) -> DECLARATIONS
Sybol: (ID) -> a
Token: (COMMA) -> ,
Sybol: (ID) -> b
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (INTEGER) -> INTEGER
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> c
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (CHARACTER) -> CHARACTER
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> d
Token: (COMMA) -> ,
Sybol: (ID) -> e
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (REAL) -> REAL
Token: (SEMI_COLON) -> ;
Token: (CODE) -> CODE
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> a
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> b
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (IF) -> IF
Sybol: (ID) -> a
Token: (GREATER_THAN) -> >
Sybol: (ID) -> b
Token: (THEN) -> THEN
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (CHARACTER_CONSTANT) -> 'A'
Token: (KET) -> )
Token: (ELSE) -> ELSE
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (CHARACTER_CONSTANT) -> 'B'
Token: (KET) -> )
Token: (END_IF) -> ENDIF
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (SEMI_COLON) -> ;
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> d
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> d
Token: (MULTIPLY) -> *
Sybol: (REAL_CONSTANT) -> 2.3
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> e
Token: (SEMI_COLON) -> ;
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> e
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (SEMI_COLON) -> ;
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> c
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> c
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (ENDP) -> ENDP
Sybol: (ID) -> ProgB
Token: (FULL_STOP) -> .
--19/11/2017----------------------------------------------------- 
Lexical Tokens for c.spl 
--17:49:08.15----------------------------------------------------- 
Sybol: (ID) -> Prog3
Token: (COLON) -> :
Token: (DECLARATIONS) -> DECLARATIONS
Sybol: (ID) -> a
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (INTEGER) -> INTEGER
Token: (SEMI_COLON) -> ;
Token: (CODE) -> CODE
Token: (FOR) -> FOR
Sybol: (ID) -> a
Token: (IS) -> IS
Sybol: (INTEGER_CONSTANT) -> 1
Token: (BY) -> BY
Sybol: (INTEGER_CONSTANT) -> 1
Token: (TO) -> TO
Sybol: (INTEGER_CONSTANT) -> 13
Token: (DO) -> DO
Token: (IF) -> IF
Token: (NOT) -> NOT
Sybol: (ID) -> a
Token: (EQUAL_TO) -> =
Sybol: (INTEGER_CONSTANT) -> 7
Token: (THEN) -> THEN
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> a
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (END_IF) -> ENDIF
Token: (END_FOR) -> ENDFOR
Token: (SEMI_COLON) -> ;
Sybol: (INTEGER_CONSTANT) -> 0
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> a
Token: (SEMI_COLON) -> ;
Token: (DO) -> DO
Sybol: (ID) -> a
Token: (ADD) -> +
Sybol: (INTEGER_CONSTANT) -> 1
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> a
Token: (SEMI_COLON) -> ;
Token: (IF) -> IF
Token: (NOT) -> NOT
Sybol: (ID) -> a
Token: (EQUAL_TO) -> =
Sybol: (INTEGER_CONSTANT) -> 6
Token: (AND) -> AND
Sybol: (ID) -> a
Token: (NOT_EQUAL) -> <>
Sybol: (INTEGER_CONSTANT) -> 8
Token: (THEN) -> THEN
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> a
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (END_IF) -> ENDIF
Token: (WHILE) -> WHILE
Sybol: (ID) -> a
Token: (LESS_THAN) -> <
Sybol: (INTEGER_CONSTANT) -> 14
Token: (END_DO) -> ENDDO
Token: (SEMI_COLON) -> ;
Sybol: (INTEGER_CONSTANT) -> 0
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> a
Token: (SEMI_COLON) -> ;
Token: (WHILE) -> WHILE
Sybol: (ID) -> a
Token: (LESS_THAN) -> <
Sybol: (INTEGER_CONSTANT) -> 12
Token: (DO) -> DO
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> a
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> a
Token: (ADD) -> +
Sybol: (INTEGER_CONSTANT) -> 1
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> a
Token: (END_WHILE) -> ENDWHILE
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (ENDP) -> ENDP
Sybol: (ID) -> Prog3
Token: (FULL_STOP) -> .
--19/11/2017----------------------------------------------------- 
Lexical Tokens for d.spl 
--17:49:09.54----------------------------------------------------- 
Sybol: (ID) -> Prog4D
Token: (COLON) -> :
Token: (DECLARATIONS) -> DECLARATIONS
Sybol: (ID) -> r1
Token: (COMMA) -> ,
Sybol: (ID) -> r2
Token: (COMMA) -> ,
Sybol: (ID) -> r3
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (REAL) -> REAL
Token: (SEMI_COLON) -> ;
Token: (CODE) -> CODE
Token: (MINUS) -> -
Sybol: (REAL_CONSTANT) -> 2.4
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> r1
Token: (SEMI_COLON) -> ;
Token: (MINUS) -> -
Sybol: (REAL_CONSTANT) -> 34.989
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> r2
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> r1
Token: (MULTIPLY) -> *
Sybol: (ID) -> r2
Token: (DIVIDE) -> /
Sybol: (REAL_CONSTANT) -> 7.4
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> r3
Token: (SEMI_COLON) -> ;
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> r3
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (SEMI_COLON) -> ;
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> r1
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Sybol: (ID) -> r1
Token: (ADD) -> +
Sybol: (ID) -> r3
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> r3
Token: (SEMI_COLON) -> ;
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> r3
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (ENDP) -> ENDP
Sybol: (ID) -> Prog4D
Token: (FULL_STOP) -> .
--19/11/2017----------------------------------------------------- 
Lexical Tokens for e.spl 
--17:49:10.96----------------------------------------------------- 
Sybol: (ID) -> ProgV
Token: (COLON) -> :
Token: (DECLARATIONS) -> DECLARATIONS
Sybol: (ID) -> integer
Token: (COMMA) -> ,
Sybol: (ID) -> i
Token: (OF) -> OF
Token: (TYPE) -> TYPE
Token: (INTEGER) -> INTEGER
Token: (SEMI_COLON) -> ;
Token: (CODE) -> CODE
Token: (READ) -> READ
Token: (BRA) -> (
Sybol: (ID) -> integer
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (IF) -> IF
Sybol: (ID) -> integer
Token: (LESS_THAN_EQUAL_TO) -> <=
Sybol: (INTEGER_CONSTANT) -> 5
Token: (OR) -> OR
Sybol: (ID) -> integer
Token: (GREATER_THAN_EQUAL_TO) -> >=
Sybol: (INTEGER_CONSTANT) -> 12
Token: (THEN) -> THEN
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> integer
Token: (KET) -> )
Token: (END_IF) -> ENDIF
Token: (SEMI_COLON) -> ;
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Token: (BRA) -> (
Sybol: (INTEGER_CONSTANT) -> 36
Token: (MINUS) -> -
Sybol: (INTEGER_CONSTANT) -> 1
Token: (KET) -> )
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (SEMI_COLON) -> ;
Token: (FOR) -> FOR
Sybol: (ID) -> integer
Token: (IS) -> IS
Token: (MINUS) -> -
Sybol: (INTEGER_CONSTANT) -> 1
Token: (BY) -> BY
Token: (MINUS) -> -
Sybol: (INTEGER_CONSTANT) -> 1
Token: (TO) -> TO
Token: (MINUS) -> -
Sybol: (INTEGER_CONSTANT) -> 5
Token: (DO) -> DO
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> integer
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (END_FOR) -> ENDFOR
Token: (SEMI_COLON) -> ;
Token: (MINUS) -> -
Sybol: (INTEGER_CONSTANT) -> 1
Token: (ASSIGNMENT) -> ->
Sybol: (ID) -> i
Token: (SEMI_COLON) -> ;
Token: (FOR) -> FOR
Sybol: (ID) -> integer
Token: (IS) -> IS
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (BY) -> BY
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (TO) -> TO
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Sybol: (ID) -> i
Token: (MULTIPLY) -> *
Token: (BRA) -> (
Sybol: (ID) -> i
Token: (ADD) -> +
Sybol: (ID) -> i
Token: (ADD) -> +
Sybol: (ID) -> i
Token: (ADD) -> +
Sybol: (ID) -> i
Token: (ADD) -> +
Sybol: (ID) -> i
Token: (KET) -> )
Token: (DO) -> DO
Token: (WRITE) -> WRITE
Token: (BRA) -> (
Sybol: (ID) -> integer
Token: (KET) -> )
Token: (SEMI_COLON) -> ;
Token: (NEWLINE) -> NEWLINE
Token: (END_FOR) -> ENDFOR
Token: (ENDP) -> ENDP
Sybol: (ID) -> ProgV
Token: (FULL_STOP) -> .
--19/11/2017----------------------------------------------------- 
Parse debug output for a.spl 
--17:53:19.91----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 1
Reading a token: Next token is token COLON_T ()
Shifting token COLON_T ()
Entering state 3
Reading a token: Next token is token CODE_T ()
Shifting token CODE_T ()
Entering state 6
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 14
Reducing stack by rule 47 (line 386):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 6 20 42
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 6 20 42
Entering state 72
Reading a token: Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 91
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 14
Reducing stack by rule 47 (line 386):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 6 20 42 72 91
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 6 20 42 72 91
Entering state 72
Reading a token: Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 91
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 14
Reducing stack by rule 47 (line 386):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 6 20 42 72 91 72 91
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 6 20 42 72 91 72 91
Entering state 72
Reading a token: Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 91
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 14
Reducing stack by rule 47 (line 386):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 6 20 42 72 91 72 91 72 91
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 6 20 42 72 91 72 91 72 91
Entering state 72
Reading a token: Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 91
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 14
Reducing stack by rule 47 (line 386):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 6 20 42 72 91 72 91 72 91 72 91
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 6 20 42 72 91 72 91 72 91 72 91
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 6 20 42 72 91 72 91 72 91 72 91
Entering state 99
Reducing stack by rule 20 (line 260):
   $1 = nterm val ()
   $2 = token COMMA_T ()
   $3 = nterm write_block ()
-> $$ = nterm write_block ()
Stack now 0 1 3 6 20 42 72 91 72 91 72 91
Entering state 99
Reducing stack by rule 20 (line 260):
   $1 = nterm val ()
   $2 = token COMMA_T ()
   $3 = nterm write_block ()
-> $$ = nterm write_block ()
Stack now 0 1 3 6 20 42 72 91 72 91
Entering state 99
Reducing stack by rule 20 (line 260):
   $1 = nterm val ()
   $2 = token COMMA_T ()
   $3 = nterm write_block ()
-> $$ = nterm write_block ()
Stack now 0 1 3 6 20 42 72 91
Entering state 99
Reducing stack by rule 20 (line 260):
   $1 = nterm val ()
   $2 = token COMMA_T ()
   $3 = nterm write_block ()
-> $$ = nterm write_block ()
Stack now 0 1 3 6 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack noPROGRAM -> ProgA
 `-- Node identifier -> BLOCK
 `-- `-- Node identifier -> WRITE_STATEMENT
 `-- Node identifier -> WRITE_BLOCK
 `-- Node identifier -> VAL
 `-- Constant [CHARACTER_CONSTANT] -> 'h'
 |   `-- |       |   `-- Node identifier -> WRITE_BLOCK
 |       |   `-- Node identifier -> VAL
 |       |   `-- Constant [CHARACTER_CONSTANT] -> 'e'
 |       |   |   `-- |       |   |       |   `-- Node identifier -> WRITE_BLOCK
 |       |   |       |   `-- Node identifier -> VAL
 |       |   |       |   `-- Constant [CHARACTER_CONSTANT] -> 'l'
 |       |   |       |   |   `-- |       |   |       |   |       |   `-- Node identifier -> WRITE_BLOCK
 |       |   |       |   |       |   `-- Node identifier -> VAL
 |       |   |       |   |       |   `-- Constant [CHARACTER_CONSTANT] -> 'l'
 |       |   |       |   |       |   |   `-- |       |   |       |   |       |   |       |   `-- Node identifier -> WRITE_BLOCK
 |       |   |       |   |       |   |       |   `-- Node identifier -> VAL
 |       |   |       |   |       |   |       |   `-- Constant [CHARACTER_CONSTANT] -> 'o'
 |       |   |       |   |       |   |       |   |   `-- |       |   |       |   |       |   |       |   |       |   `-- |       |   |       |   |       |   |       |   |       |                       |   `-- |       |   |       |   |       |   |       |   |       |                       |       |   `-- |       |   |       |   |       |   |       |   |       |                       |       |   `-- Node identifier -> NEWLINE_STATEMENT
 |       |   |       |   |       |   |       |   |       |                       |       |   |   `-- |       |   |       |   |       |   |       |   |       |                       |       |   |           |   `-- |       |   |       |   |       |   |       |   |       |                       |       |   |           |       |   `--w 0 1 3 6
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 24 44
Entering state 24
Reading a token: Next token is token ENDP_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 6 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 6
Entering state 23
Reducing stack by rule 3 (line 179):
   $1 = token CODE_T ()
   $2 = nterm statement_block ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_T ()
Shifting token ENDP_T ()
Entering state 28
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 51
Reading a token: Next token is token FULL_STOP_T ()
Shifting token FULL_STOP_T ()
Entering state 77
Reducing stack by rule 1 (line 160):
   $1 = token ID_T ()
   $2 = token COLON_T ()
   $3 = nterm block ()
   $4 = token ENDP_T ()
   $5 = token ID_T ()
   $6 = token FULL_STOP_T ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--19/11/2017----------------------------------------------------- 
Parse debug output for b.spl 
--17:53:33.32----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 1
Reading a token: Next token is token COLON_T ()
Shifting token COLON_T ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_T ()
Shifting token DECLARATIONS_T ()
Entering state 5
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 30
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token OF_T ()
Shifting token OF_T ()
Entering state 29
Reading a token: Next token is token TYPE_T ()
Shifting token TYPE_T ()
Entering state 52
Reading a token: Next token is token INTEGER_T ()
Shifting token INTEGER_T ()
Entering state 79
Reducing stack by rule 42 (line 364):
   $1 = token INTEGER_T ()
-> $$ = nterm type ()
Stack now 0 1 3 5 8 30 8 29 52
Entering state 81
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 93
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token OF_T ()
Shifting token OF_T ()
Entering state 29
Reading a token: Next token is token TYPE_T ()
Shifting token TYPE_T ()
Entering state 52
Reading a token: Next token is token CHARACTER_T ()
Shifting token CHARACTER_T ()
Entering state 78
Reducing stack by rule 44 (line 372):
   $1 = token CHARACTER_T ()
-> $$ = nterm type ()
Stack now 0 1 3 5 8 30 8 29 52 81 93 8 29 52
Entering state 81
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 93
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 30
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token OF_T ()
Shifting token OF_T ()
Entering state 29
Reading a token: Next token is token TYPE_T ()
Shifting token TYPE_T ()
Entering state 52
Reading a token: Next token is token REAL_T ()
Shifting token REAL_T ()
Entering state 80
Reducing stack by rule 43 (line 368):
   $1 = token REAL_T ()
-> $$ = nterm type ()
Stack now 0 1 3 5 8 30 8 29 52 81 93 8 29 52 81 93 8 30 8 29 52
Entering state 81
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 93
Reading a token: Next token is token CODE_T ()
Reducing stack by rule 4 (line 187):
   $1 = token ID_T ()
   $2 = token OF_T ()
   $3 = token TYPE_T ()
   $4 = nterm type ()
   $5 = token SEMI_COLON_T ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5 8 30 8 29 52 81 93 8 29 52 81 93 8 30
Entering state 53
Reducing stack by rule 6 (line 195):
   $1 = token ID_T ()
   $2 = token COMMA_T ()
   $3 = nterm declarations ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5 8 30 8 29 52 81 93 8 29 52 81 93
Entering state 100
Reducing stack by rule 5 (line 191):
   $1 = token ID_T ()
   $2 = token OF_T ()
   $3 = token TYPE_T ()
   $4 = nterm type ()
   $5 = token SEMI_COLON_T ()
   $6 = nterm declarations ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5 8 30 8 29 52 81 93
Entering state 100
Reducing stack by rule 5 (line 191):
   $1 = token ID_T ()
   $2 = token OF_T ()
   $3 = token TYPE_T ()
   $4 = nterm type ()
   $5 = token SEMI_COLON_T ()
   $6 = nterm declarations ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5 8 30
Entering state 53
Reducing stack by rule 6 (line 195):
   $1 = token ID_T ()
   $2 = token COMMA_T ()
   $3 = nterm declarations ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5
Entering state 9
Next token is token CODE_T ()
Shifting token CODE_T ()
Entering state 31
Reading a token: Next token is token READ_T ()
Shifting token READ_T ()
Entering state 21
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 43
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 73
Reading a token: Next token is token KET_T ()
Shifting token KET_T ()
Entering state 92
Reducing stack by rule 11 (line 219):
   $1 = token READ_T ()
   $2 = token BRA_T ()
   $3 = token ID_T ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token READ_T ()
Shifting token READ_T ()
Entering state 21
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 43
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 73
Reading a token: Next token is token KET_T ()
Shifting token KET_T ()
Entering state 92
Reducing stack by rule 11 (line 219):
   $1 = token READ_T ()
   $2 = token BRA_T ()
   $3 = token ID_T ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token IF_T ()
Shifting token IF_T ()
Entering state 16
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 16
Entering state 26
Reading a token: Next token is token GREATER_THAN_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 16
Entering state 37
Next token is token GREATER_THAN_T ()
Shifting token GREATER_THAN_T ()
Entering state 65
Reducing stack by rule 35 (line 330):
   $1 = token GREATER_THAN_T ()
-> $$ = nterm comp ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 37
Entering state 66
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 37 66
Entering state 26
Reading a token: Next token is token THEN_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 37 66
Entering state 85
Reducing stack by rule 25 (line 284):
   $1 = nterm expr ()
   $2 = nterm comp ()
   $3 = nterm expr ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 31 24 44 24 44 16
Entering state 36
Next token is token THEN_T ()
Reducing stack by rule 21 (line 266):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 31 24 44 24 44 16
Entering state 35
Next token is token THEN_T ()
Shifting token THEN_T ()
Entering state 57
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 14
Reducing stack by rule 47 (line 386):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 35 57 20 42
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 35 57 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 35 57 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 35 57
Entering state 24
Reading a token: Next token is token ELSE_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 35 57
Entering state 82
Next token is token ELSE_T ()
Shifting token ELSE_T ()
Entering state 94
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token CHARACTER_CONSTANT_T ()
Shifting token CHARACTER_CONSTANT_T ()
Entering state 14
Reducing stack by rule 47 (line 386):
   $1 = token CHARACTER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 35 57 82 94 20 42
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 35 57 82 94 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 35 57 82 94 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 35 57 82 94
Entering state 24
Reading a token: Next token is token END_IF_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 16 35 57 82 94
Entering state 101
Next token is token END_IF_T ()
Shifting token END_IF_T ()
Entering state 103
Reducing stack by rule 13 (line 227):
   $1 = token IF_T ()
   $2 = nterm conditional ()
   $3 = token THEN_T ()
   $4 = nterm statement_block ()
   $5 = token ELSE_T ()
   $6 = nterm statement_block ()
   $7 = token END_IF_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token READ_T ()
Shifting token READ_T ()
Entering state 21
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 43
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 73
Reading a token: Next token is token KET_T ()
Shifting token KET_T ()
Entering state 92
Reducing stack by rule 11 (line 219):
   $1 = token READ_T ()
   $2 = token BRA_T ()
   $3 = token ID_T ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 26
Reading a token: Next token is token MULTIPLY_T ()
Shifting token MULTIPLY_T ()
Entering state 48
Reducing stack by rule 40 (line 353):
   $1 = token MULTIPLY_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 26
Entering state 50
Reading a token: Next token is token REAL_CONSTANT_T ()
Shifting token REAL_CONSTANT_T ()
Entering state 13
Reducing stack by rule 46 (line 382):
   $1 = token REAL_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 26 50
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 26 50
Entering state 26
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 25
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 45
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 75
Reducing stack by rule 9 (line 211):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token READ_T ()
Shifting token READ_T ()
Entering state 21
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 43
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 73
Reading a token: Next token is token KET_T ()
Shifting token KET_T ()
Entering state 92
Reducing stack by rule 11 (line 219):
   $1 = token READ_T ()
   $2 = token BRA_T ()
   $3 = token ID_T ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token ENDP_T ()
RedPROGRAM -> ProgB
 `-- `-- `-- `--Type -> int
  |   `-- |   `--Type -> char
  |   |   `-- |   |   `-- |   |   `--Type -> float
  |   |   |   `-- |   |   |       |   `-- |   |   |       |               |   `-- |   |   |       |               |       |   `-- |   |   |       |               |       |   `-- Node identifier -> READ_STATEMENT
Identifier -> a
 |   |   |       |               |       |   |   `-- |   |   |       |               |       |   |   `-- Node identifier -> READ_STATEMENT
Identifier -> b
 |   |   |       |               |       |   |   |   `-- |   |   |       |               |       |   |   |   `-- Node identifier -> IF_STATEMENT_ELSE
 |   |   |       |               |       |   |   |   `-- Node identifier -> CONDITIONAL
 |   |   |       |               |       |   |   |   `-- Node identifier -> CONDITION
 |   |   |       |               |       |   |   |   `-- Node identifier -> EXPR
 |   |   |       |               |       |   |   |   `-- Node identifier -> VAL_ID
Identifier -> a
 |   |   |       |               |       |   |   |   |   `-- |   |   |       |               |       |   |   |   |       |   `-- Node identifier -> CONDITION
 |   |   |       |               |       |   |   |   |       |   `--Comparator -> [>] COMPARATOR_GREATER_THAN
 |   |   |       |               |       |   |   |   |       |   |   `-- Node identifier -> EXPR
 |   |   |       |               |       |   |   |   |       |   |   `-- Node identifier -> VAL_ID
Identifier -> b
 |   |   |       |               |       |   |   |   |       |   |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   `-- Node identifier -> IF_STATEMENT_ELSE
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   `-- Node identifier -> WRITE_STATEMENT
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   `-- Node identifier -> WRITE_BLOCK
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   `-- Node identifier -> VAL
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   `-- Constant [CHARACTER_CONSTANT] -> 'A'
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   `-- Node identifier -> WRITE_STATEMENT
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   `-- Node identifier -> WRITE_BLOCK
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   `-- Node identifier -> VAL
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   `-- Constant [CHARACTER_CONSTANT] -> 'B'
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   `-- Node identifier -> NEWLINE_STATEMENT
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   `-- Node identifier -> READ_STATEMENT
Identifier -> d
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   `-- Node identifier -> ASSIGNMENT_STATEMENT
Identifier -> e
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   `-- Node identifier -> EXPR
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   `-- Node identifier -> VAL_ID
Identifier -> d
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   `-- Node identifier -> EXPR
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   `-- Node identifier -> EXPR
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   `-- Node identifier -> VAL
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   `-- Constant [REAL_CONSTANT] -> 2.3
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   `-- Node identifier -> WRITE_STATEMENT
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   `-- Node identifier -> WRITE_BLOCK
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   `-- Node identifier -> VAL_ID
Identifier -> e
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   `-- Node identifier -> NEWLINE_STATEMENT
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   `-- Node identifier -> READ_STATEMENT
Identifier -> c
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   |   `-- Node identifier -> WRITE_STATEMENT
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   |   `-- Node identifier -> WRITE_BLOCK
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   |   `-- Node identifier -> VAL_ID
Identifier -> c
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   |   |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   |   |       |       |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   |   |       |       |   `-- Node identifier -> NEWLINE_STATEMENT
 |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   |   |       |       |   |   `-- |   |   |       |               |       |   |   |   |       |   |   |               |       |   |       |       |       |       |   |       |       |       |               |   |   |   |   |   |       |               |       |   |       |       |   |   |   |       |       |   |                                                   |   `--ucing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31
Entering state 54
Reducing stack by rule 2 (line 175):
   $1 = token DECLARATIONS_T ()
   $2 = nterm declarations ()
   $3 = token CODE_T ()
   $4 = nterm statement_block ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_T ()
Shifting token ENDP_T ()
Entering state 28
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 51
Reading a token: Next token is token FULL_STOP_T ()
Shifting token FULL_STOP_T ()
Entering state 77
Reducing stack by rule 1 (line 160):
   $1 = token ID_T ()
   $2 = token COLON_T ()
   $3 = nterm block ()
   $4 = token ENDP_T ()
   $5 = token ID_T ()
   $6 = token FULL_STOP_T ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--19/11/2017----------------------------------------------------- 
Parse debug output for c.spl 
--17:53:34.80----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 1
Reading a token: Next token is token COLON_T ()
Shifting token COLON_T ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_T ()
Shifting token DECLARATIONS_T ()
Entering state 5
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token OF_T ()
Shifting token OF_T ()
Entering state 29
Reading a token: Next token is token TYPE_T ()
Shifting token TYPE_T ()
Entering state 52
Reading a token: Next token is token INTEGER_T ()
Shifting token INTEGER_T ()
Entering state 79
Reducing stack by rule 42 (line 364):
   $1 = token INTEGER_T ()
-> $$ = nterm type ()
Stack now 0 1 3 5 8 29 52
Entering state 81
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 93
Reading a token: Next token is token CODE_T ()
Reducing stack by rule 4 (line 187):
   $1 = token ID_T ()
   $2 = token OF_T ()
   $3 = token TYPE_T ()
   $4 = nterm type ()
   $5 = token SEMI_COLON_T ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5
Entering state 9
Next token is token CODE_T ()
Shifting token CODE_T ()
Entering state 31
Reading a token: Next token is token FOR_T ()
Shifting token FOR_T ()
Entering state 19
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 40
Reading a token: Next token is token IS_T ()
Shifting token IS_T ()
Entering state 69
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 19 40 69
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 19 40 69
Entering state 26
Reading a token: Next token is token BY_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 19 40 69
Entering state 88
Next token is token BY_T ()
Shifting token BY_T ()
Entering state 98
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 19 40 69 88 98
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 19 40 69 88 98
Entering state 26
Reading a token: Next token is token TO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 19 40 69 88 98
Entering state 102
Next token is token TO_T ()
Shifting token TO_T ()
Entering state 104
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 19 40 69 88 98 102 104
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 19 40 69 88 98 102 104
Entering state 26
Reading a token: Next token is token DO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 19 40 69 88 98 102 104
Entering state 105
Next token is token DO_T ()
Shifting token DO_T ()
Entering state 106
Reducing stack by rule 18 (line 249):
   $1 = token ID_T ()
   $2 = token IS_T ()
   $3 = nterm expr ()
   $4 = token BY_T ()
   $5 = nterm expr ()
   $6 = token TO_T ()
   $7 = nterm expr ()
   $8 = token DO_T ()
-> $$ = nterm for_block ()
Stack now 0 1 3 5 9 31 19
Entering state 41
Reading a token: Next token is token IF_T ()
Shifting token IF_T ()
Entering state 16
Reading a token: Next token is token NOT_T ()
Shifting token NOT_T ()
Entering state 34
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 19 41 16 34
Entering state 26
Reading a token: Next token is token EQUAL_TO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 19 41 16 34
Entering state 37
Next token is token EQUAL_TO_T ()
Shifting token EQUAL_TO_T ()
Entering state 60
Reducing stack by rule 32 (line 318):
   $1 = token EQUAL_TO_T ()
-> $$ = nterm comp ()
Stack now 0 1 3 5 9 31 19 41 16 34 37
Entering state 66
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 19 41 16 34 37 66
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 19 41 16 34 37 66
Entering state 26
Reading a token: Next token is token THEN_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 19 41 16 34 37 66
Entering state 85
Reducing stack by rule 25 (line 284):
   $1 = nterm expr ()
   $2 = nterm comp ()
   $3 = nterm expr ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 31 19 41 16 34
Entering state 36
Next token is token THEN_T ()
Reducing stack by rule 21 (line 266):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 31 19 41 16 34
Entering state 56
Reducing stack by rule 22 (line 270):
   $1 = token NOT_T ()
   $2 = nterm conditional ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 31 19 41 16
Entering state 35
Next token is token THEN_T ()
Shifting token THEN_T ()
Entering state 57
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 19 41 16 35 57 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 19 41 16 35 57 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 19 41 16 35 57
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 19 41 16 35 57 24 44
Entering state 24
Reading a token: Next token is token END_IF_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 19 41 16 35 57 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 19 41 16 35 57
Entering state 82
Next token is token END_IF_T ()
Shifting token END_IF_T ()
Entering state 95
Reducing stack by rule 12 (line 223):
   $1 = token IF_T ()
   $2 = nterm conditional ()
   $3 = token THEN_T ()
   $4 = nterm statement_block ()
   $5 = token END_IF_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 19 41
Entering state 24
Reading a token: Next token is token END_FOR_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 19 41
Entering state 70
Next token is token END_FOR_T ()
Shifting token END_FOR_T ()
Entering state 89
Reducing stack by rule 17 (line 243):
   $1 = token FOR_T ()
   $2 = nterm for_block ()
   $3 = nterm statement_block ()
   $4 = token END_FOR_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44
Entering state 26
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44
Entering state 25
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 45
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 75
Reducing stack by rule 9 (line 211):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token DO_T ()
Shifting token DO_T ()
Entering state 17
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 17
Entering state 26
Reading a token: Next token is token ADD_T ()
Shifting token ADD_T ()
Entering state 46
Reducing stack by rule 38 (line 345):
   $1 = token ADD_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 26
Entering state 50
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 26 50
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 26 50
Entering state 26
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 17
Entering state 25
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 45
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 75
Reducing stack by rule 9 (line 211):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 17
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token IF_T ()
Shifting token IF_T ()
Entering state 16
Reading a token: Next token is token NOT_T ()
Shifting token NOT_T ()
Entering state 34
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34
Entering state 26
Reading a token: Next token is token EQUAL_TO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34
Entering state 37
Next token is token EQUAL_TO_T ()
Shifting token EQUAL_TO_T ()
Entering state 60
Reducing stack by rule 32 (line 318):
   $1 = token EQUAL_TO_T ()
-> $$ = nterm comp ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 37
Entering state 66
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 37 66
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 37 66
Entering state 26
Reading a token: Next token is token AND_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 37 66
Entering state 85
Reducing stack by rule 25 (line 284):
   $1 = nterm expr ()
   $2 = nterm comp ()
   $3 = nterm expr ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34
Entering state 36
Next token is token AND_T ()
Shifting token AND_T ()
Entering state 59
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 36 59
Entering state 26
Reading a token: Next token is token NOT_EQUAL_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 36 59
Entering state 37
Next token is token NOT_EQUAL_T ()
Shifting token NOT_EQUAL_T ()
Entering state 61
Reducing stack by rule 33 (line 322):
   $1 = token NOT_EQUAL_T ()
-> $$ = nterm comp ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 36 59 37
Entering state 66
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 36 59 37 66
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 36 59 37 66
Entering state 26
Reading a token: Next token is token THEN_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 36 59 37 66
Entering state 85
Reducing stack by rule 25 (line 284):
   $1 = nterm expr ()
   $2 = nterm comp ()
   $3 = nterm expr ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 36 59
Entering state 36
Next token is token THEN_T ()
Reducing stack by rule 21 (line 266):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34 36 59
Entering state 84
Reducing stack by rule 23 (line 274):
   $1 = nterm condition ()
   $2 = token AND_T ()
   $3 = nterm conditional ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 34
Entering state 56
Reducing stack by rule 22 (line 270):
   $1 = token NOT_T ()
   $2 = nterm conditional ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16
Entering state 35
Next token is token THEN_T ()
Shifting token THEN_T ()
Entering state 57
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 35 57 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 35 57 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 35 57
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 35 57 24 44
Entering state 24
Reading a token: Next token is token END_IF_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 35 57 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44 16 35 57
Entering state 82
Next token is token END_IF_T ()
Shifting token END_IF_T ()
Entering state 95
Reducing stack by rule 12 (line 223):
   $1 = token IF_T ()
   $2 = nterm conditional ()
   $3 = token THEN_T ()
   $4 = nterm statement_block ()
   $5 = token END_IF_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44
Entering state 24
Reading a token: Next token is token WHILE_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 17
Entering state 38
Next token is token WHILE_T ()
Shifting token WHILE_T ()
Entering state 67
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 38 67
Entering state 26
Reading a token: Next token is token LESS_THAN_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 38 67
Entering state 37
Next token is token LESS_THAN_T ()
Shifting token LESS_THAN_T ()
Entering state 63
Reducing stack by rule 34 (line 326):
   $1 = token LESS_THAN_T ()
-> $$ = nterm comp ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 38 67 37
Entering state 66
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 38 67 37 66
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 38 67 37 66
Entering state 26
Reading a token: Next token is token END_DO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 38 67 37 66
Entering state 85
Reducing stack by rule 25 (line 284):
   $1 = nterm expr ()
   $2 = nterm comp ()
   $3 = nterm expr ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 38 67
Entering state 36
Next token is token END_DO_T ()
Reducing stack by rule 21 (line 266):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 31 24 44 24 44 17 38 67
Entering state 86
Next token is token END_DO_T ()
Shifting token END_DO_T ()
Entering state 96
Reducing stack by rule 14 (line 231):
   $1 = token DO_T ()
   $2 = nterm statement_block ()
   $3 = token WHILE_T ()
   $4 = nterm conditional ()
   $5 = token END_DO_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 26
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 25
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 45
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 75
Reducing stack by rule 9 (line 211):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token WHILE_T ()
Shifting token WHILE_T ()
Entering state 18
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18
Entering state 26
Reading a token: Next token is token LESS_THAN_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18
Entering state 37
Next token is token LESS_THAN_T ()
Shifting token LESS_THAN_T ()
Entering state 63
Reducing stack by rule 34 (line 326):
   $1 = token LESS_THAN_T ()
-> $$ = nterm comp ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 37
Entering state 66
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 37 66
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 37 66
Entering state 26
Reading a token: Next token is token DO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 37 66
Entering state 85
Reducing stack by rule 25 (line 284):
   $1 = nterm expr ()
   $2 = nterm comp ()
   $3 = nterm expr ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18
Entering state 36
Next token is token DO_T ()
Reducing stack by rule 21 (line 266):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18
Entering state 39
Next token is token DO_T ()
Shifting token DO_T ()
Entering state 68
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68 24 44
Entering state 26
Reading a token: Next token is token ADD_T ()
Shifting token ADD_T ()
Entering state 46
Reducing stack by rule 38 (line 345):
   $1 = token ADD_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68 24 44 26
Entering state 50
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68 24 44 26 50
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68 24 44 26 50
Entering state 26
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68 24 44 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68 24 44
Entering state 25
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 45
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 75
Reducing stack by rule 9 (line 211):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68 24 44
Entering state 24
Reading a token: Next token is token END_WHILE_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 18 39 68
Entering state 87
Next token is token END_WHILE_T ()
Shifting token END_WHILE_T ()
Entering state 97
Reducing stack by rule 15 (line 235):
   $1 = token WHILE_T ()
   $2 = nterm conditional ()
   $3 = token DO_T ()
   $4 = nterm statement_block ()
   $5 = token END_WHILE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token ENDP_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31
Entering state 54
Reducing stack by rule 2 (line 175):
   $1 = token DECLARATIONS_T ()
   $2 = nterm declarations ()
   $3 = token CODE_T ()
   $4 = nterm statement_block ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_T ()
Shifting token ENDP_T ()
Entering state 28
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 51
Reading a token: Next token is token FULL_STOP_T ()
Shifting token FULL_STOP_T ()
Entering state 77
Reducing stack by rule 1 (line 160):
   $1 = token ID_T ()
   $2 = token COLON_T ()
   $3 = nterm PROGRAM -> Prog3
 `-- `-- `--Type -> int
  |   `-- |       |   `-- |       |   `-- Node identifier -> FOR_STATEMENT
 |       |   `-- Node identifier -> FOR_BODY
Identifier -> a
 |       |   `-- Node identifier -> EXPR
 |       |   `-- Node identifier -> VAL
 |       |   `-- Constant [INTEGER_CONSTANT] -> 1
 |       |   |   `-- |       |   |       |   `-- |       |   |       |       |   `-- Node identifier -> FOR_BODY
 |       |   |       |       |   `-- Node identifier -> EXPR
 |       |   |       |       |   `-- Node identifier -> VAL
 |       |   |       |       |   `-- Constant [INTEGER_CONSTANT] -> 1
 |       |   |       |       |   |   `-- |       |   |       |       |   |       |   `-- |       |   |       |       |   |       |       |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   `-- Node identifier -> VAL
 |       |   |       |       |   |       |       |   `-- Constant [INTEGER_CONSTANT] -> 13
 |       |   |       |       |   |       |       |   |   `-- |       |   |       |       |   |       |       |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   `-- |       |   |       |       |   |       |       |   |       |               |   `-- Node identifier -> IF_STATEMENT
 |       |   |       |       |   |       |       |   |       |               |   `--Conditional -> CONDITIONAL_NOT
 |       |   |       |       |   |       |       |   |       |               |   `-- Node identifier -> CONDITIONAL
 |       |   |       |       |   |       |       |   |       |               |   `-- Node identifier -> CONDITION
 |       |   |       |       |   |       |       |   |       |               |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   `-- Node identifier -> VAL_ID
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   `-- Node identifier -> CONDITION
 |       |   |       |       |   |       |       |   |       |               |   |       |   `--Comparator -> [==] COMPARATOR_EQUAL_TO
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   `-- Node identifier -> VAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   `-- Constant [INTEGER_CONSTANT] -> 7
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   `-- Node identifier -> WRITE_STATEMENT
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   `-- Node identifier -> WRITE_BLOCK
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   `-- Node identifier -> VAL_ID
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   `-- Node identifier -> NEWLINE_STATEMENT
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   `-- Node identifier -> ASSIGNMENT_STATEMENT
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   `-- Node identifier -> VAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   `-- Constant [INTEGER_CONSTANT] -> 0
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   `-- Node identifier -> DO_STATEMENT
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   `-- Node identifier -> ASSIGNMENT_STATEMENT
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   `-- Node identifier -> VAL_ID
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   `-- Node identifier -> VAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   `-- Constant [INTEGER_CONSTANT] -> 1
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   `-- Node identifier -> IF_STATEMENT
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   `--Conditional -> CONDITIONAL_NOT
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   `--Conditional -> CONDITIONAL_AND
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   `-- Node identifier -> CONDITION
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   `-- Node identifier -> VAL_ID
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   `-- Node identifier -> CONDITION
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   `--Comparator -> [==] COMPARATOR_EQUAL_TO
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   `-- Node identifier -> VAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   `-- Constant [INTEGER_CONSTANT] -> 6
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   `-- Node identifier -> CONDITIONAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   `-- Node identifier -> CONDITION
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   `-- Node identifier -> VAL_ID
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   `-- Node identifier -> CONDITION
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   `--Comparator -> [!=] COMPARATOR_NOT_EQUAL_TO
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   `-- Node identifier -> VAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   `-- Constant [INTEGER_CONSTANT] -> 8
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   `-- Node identifier -> WRITE_STATEMENT
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   `-- Node identifier -> WRITE_BLOCK
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   `-- Node identifier -> VAL_ID
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   `-- Node identifier -> NEWLINE_STATEMENT
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   `-- Node identifier -> CONDITIONAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   `-- Node identifier -> CONDITION
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   `-- Node identifier -> VAL_ID
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   `-- Node identifier -> CONDITION
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   `--Comparator -> [<] COMPARATOR_LESS_THAN
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   `-- Node identifier -> VAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   `-- Constant [INTEGER_CONSTANT] -> 14
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   `-- Node identifier -> ASSIGNMENT_STATEMENT
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   `-- Node identifier -> VAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   `-- Constant [INTEGER_CONSTANT] -> 0
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   `-- Node identifier -> WHILE_STATEMENT
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   `-- Node identifier -> CONDITIONAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   `-- Node identifier -> CONDITION
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   `-- Node identifier -> VAL_ID
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   `-- Node identifier -> CONDITION
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   `--Comparator -> [<] COMPARATOR_LESS_THAN
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   `-- Node identifier -> VAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   `-- Constant [INTEGER_CONSTANT] -> 12
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   `-- Node identifier -> WRITE_STATEMENT
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   `-- Node identifier -> WRITE_BLOCK
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   `-- Node identifier -> VAL_ID
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   `-- Node identifier -> ASSIGNMENT_STATEMENT
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   `-- Node identifier -> VAL_ID
Identifier -> a
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   `-- Node identifier -> EXPR
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   `-- Node identifier -> VAL
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   `-- Constant [INTEGER_CONSTANT] -> 1
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   |       |               |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   |       |               |       |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   |       |               |       |               |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   |       |               |       |               |   `-- Node identifier -> NEWLINE_STATEMENT
 |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   |       |               |       |               |   |   `-- |       |   |       |       |   |       |       |   |       |               |   |       |   |   |       |               |       |       |   |       |       |   |               |           |   |       |       |       |   |   |   |       |               |       |   |       |   |   |       |               |   |       |   |   |       |               |           |       |   |       |       |   |               |           |   |       |   |   |       |               |           |   |       |       |       |   |       |   |   |       |               |       |   |       |       |   |   |   |       |               |       |               |   |                               |   `--block ()
   $4 = token ENDP_T ()
   $5 = token ID_T ()
   $6 = token FULL_STOP_T ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--19/11/2017----------------------------------------------------- 
Parse debug output for d.spl 
--17:53:40.01----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 1
Reading a token: Next token is token COLON_T ()
Shifting token COLON_T ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_T ()
Shifting token DECLARATIONS_T ()
Entering state 5
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 30
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 30
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token OF_T ()
Shifting token OF_T ()
Entering state 29
Reading a token: Next token is token TYPE_T ()
Shifting token TYPE_T ()
Entering state 52
Reading a token: Next token is token REAL_T ()
Shifting token REAL_T ()
Entering state 80
Reducing stack by rule 43 (line 368):
   $1 = token REAL_T ()
-> $$ = nterm type ()
Stack now 0 1 3 5 8 30 8 30 8 29 52
Entering state 81
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 93
Reading a token: Next token is token CODE_T ()
Reducing stack by rule 4 (line 187):
   $1 = token ID_T ()
   $2 = token OF_T ()
   $3 = token TYPE_T ()
   $4 = nterm type ()
   $5 = token SEMI_COLON_T ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5 8 30 8 30
Entering state 53
Reducing stack by rule 6 (line 195):
   $1 = token ID_T ()
   $2 = token COMMA_T ()
   $3 = nterm declarations ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5 8 30
Entering state 53
Reducing stack by rule 6 (line 195):
   $1 = token ID_T ()
   $2 = token COMMA_T ()
   $3 = nterm declarations ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5
Entering state 9
Next token is token CODE_T ()
Shifting token CODE_T ()
Entering state 31
Reading a token: Next token is token MINUS_T ()
Shifting token MINUS_T ()
Entering state 15
Reading a token: Next token is token REAL_CONSTANT_T ()
Shifting token REAL_CONSTANT_T ()
Entering state 13
Reducing stack by rule 46 (line 382):
   $1 = token REAL_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 15
Entering state 33
Reducing stack by rule 30 (line 308):
   $1 = token MINUS_T ()
   $2 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31
Entering state 26
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31
Entering state 25
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 45
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 75
Reducing stack by rule 9 (line 211):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token MINUS_T ()
Shifting token MINUS_T ()
Entering state 15
Reading a token: Next token is token REAL_CONSTANT_T ()
Shifting token REAL_CONSTANT_T ()
Entering state 13
Reducing stack by rule 46 (line 382):
   $1 = token REAL_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 15
Entering state 33
Reducing stack by rule 30 (line 308):
   $1 = token MINUS_T ()
   $2 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44
Entering state 26
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44
Entering state 25
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 45
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 75
Reducing stack by rule 9 (line 211):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44
Entering state 26
Reading a token: Next token is token MULTIPLY_T ()
Shifting token MULTIPLY_T ()
Entering state 48
Reducing stack by rule 40 (line 353):
   $1 = token MULTIPLY_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 26 50
Entering state 26
Reading a token: Next token is token DIVIDE_T ()
Shifting token DIVIDE_T ()
Entering state 49
Reducing stack by rule 41 (line 357):
   $1 = token DIVIDE_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 26 50 26
Entering state 50
Reading a token: Next token is token REAL_CONSTANT_T ()
Shifting token REAL_CONSTANT_T ()
Entering state 13
Reducing stack by rule 46 (line 382):
   $1 = token REAL_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 26 50 26 50
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 26 50 26 50
Entering state 26
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 26 50 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44
Entering state 25
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 45
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 75
Reducing stack by rule 9 (line 211):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token READ_T ()
Shifting token READ_T ()
Entering state 21
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 43
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 73
Reading a token: Next token is token KET_T ()
Shifting token KET_T ()
Entering state 92
Reducing stack by rule 11 (line 219):
   $1 = token READ_T ()
   $2 = token BRA_T ()
   $3 = token ID_T ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 26
Reading a token: Next token is token ADD_T ()
Shifting token ADD_T ()
Entering state 46
Reducing stack by rule 38 (line 345):
   $1 = token ADD_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 26 50
Entering state 26
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 25
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 45
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 75
Reducing stack by rule 9 (line 211):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token ENDP_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 PROGRAM -> Prog4D
 `-- `-- `-- `-- `--Type -> float
  |   `-- |       |   `-- |       |       |   `-- |       |       |       |   `-- |       |       |       |   `-- Node identifier -> ASSIGNMENT_STATEMENT
Identifier -> r1
 |       |       |       |   `-- Node identifier -> EXPR
 |       |       |       |   `-- Node identifier -> VAL_NEGATIVE
 |       |       |       |   `-- Constant [REAL_CONSTANT] -> 2.4
 |       |       |       |   |   `-- |       |       |       |   |       |   `-- |       |       |       |   |       |       |   `-- |       |       |       |   |       |       |       |   `-- |       |       |       |   |       |       |       |   `-- Node identifier -> ASSIGNMENT_STATEMENT
Identifier -> r2
 |       |       |       |   |       |       |       |   `-- Node identifier -> EXPR
 |       |       |       |   |       |       |       |   `-- Node identifier -> VAL_NEGATIVE
 |       |       |       |   |       |       |       |   `-- Constant [REAL_CONSTANT] -> 34.989
 |       |       |       |   |       |       |       |   |   `-- |       |       |       |   |       |       |       |   |       |   `-- |       |       |       |   |       |       |       |   |       |       |   `-- |       |       |       |   |       |       |       |   |       |       |       |   `-- |       |       |       |   |       |       |       |   |       |       |       |   `-- Node identifier -> ASSIGNMENT_STATEMENT
Identifier -> r3
 |       |       |       |   |       |       |       |   |       |       |       |   `-- Node identifier -> EXPR
 |       |       |       |   |       |       |       |   |       |       |       |   `-- Node identifier -> VAL_ID
Identifier -> r1
 |       |       |       |   |       |       |       |   |       |       |       |   |   `-- Node identifier -> EXPR
 |       |       |       |   |       |       |       |   |       |       |       |   |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   `-- Node identifier -> EXPR
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   `-- Node identifier -> VAL_ID
Identifier -> r2
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   `-- Node identifier -> EXPR
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   `-- Node identifier -> VAL
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   `-- Constant [REAL_CONSTANT] -> 7.4
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   `-- Node identifier -> WRITE_STATEMENT
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   `-- Node identifier -> WRITE_BLOCK
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   `-- Node identifier -> VAL_ID
Identifier -> r3
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   `-- Node identifier -> NEWLINE_STATEMENT
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   `-- Node identifier -> READ_STATEMENT
Identifier -> r1
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   `-- Node identifier -> ASSIGNMENT_STATEMENT
Identifier -> r3
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   `-- Node identifier -> EXPR
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   `-- Node identifier -> VAL_ID
Identifier -> r1
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   `-- Node identifier -> EXPR
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   `-- Node identifier -> VAL_ID
Identifier -> r3
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |       |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |       |   `-- Node identifier -> WRITE_STATEMENT
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |       |   `-- Node identifier -> WRITE_BLOCK
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |       |   `-- Node identifier -> VAL_ID
Identifier -> r3
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |       |   |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |       |   |       |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |       |   |       |       |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |       |   |       |       |   `-- Node identifier -> NEWLINE_STATEMENT
 |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |       |   |       |       |   |   `-- |       |       |       |   |       |       |       |   |       |       |       |   |   |   |   |   |       |                       |       |   |       |       |   |   |   |   |   |               |       |   |       |       |   |                                           |   `--5 9 31 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31
Entering state 54
Reducing stack by rule 2 (line 175):
   $1 = token DECLARATIONS_T ()
   $2 = nterm declarations ()
   $3 = token CODE_T ()
   $4 = nterm statement_block ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_T ()
Shifting token ENDP_T ()
Entering state 28
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 51
Reading a token: Next token is token FULL_STOP_T ()
Shifting token FULL_STOP_T ()
Entering state 77
Reducing stack by rule 1 (line 160):
   $1 = token ID_T ()
   $2 = token COLON_T ()
   $3 = nterm block ()
   $4 = token ENDP_T ()
   $5 = token ID_T ()
   $6 = token FULL_STOP_T ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--19/11/2017----------------------------------------------------- 
Parse debug output for e.spl 
--17:53:42.10----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 1
Reading a token: Next token is token COLON_T ()
Shifting token COLON_T ()
Entering state 3
Reading a token: Next token is token DECLARATIONS_T ()
Shifting token DECLARATIONS_T ()
Entering state 5
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token COMMA_T ()
Shifting token COMMA_T ()
Entering state 30
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 8
Reading a token: Next token is token OF_T ()
Shifting token OF_T ()
Entering state 29
Reading a token: Next token is token TYPE_T ()
Shifting token TYPE_T ()
Entering state 52
Reading a token: Next token is token INTEGER_T ()
Shifting token INTEGER_T ()
Entering state 79
Reducing stack by rule 42 (line 364):
   $1 = token INTEGER_T ()
-> $$ = nterm type ()
Stack now 0 1 3 5 8 30 8 29 52
Entering state 81
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 93
Reading a token: Next token is token CODE_T ()
Reducing stack by rule 4 (line 187):
   $1 = token ID_T ()
   $2 = token OF_T ()
   $3 = token TYPE_T ()
   $4 = nterm type ()
   $5 = token SEMI_COLON_T ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5 8 30
Entering state 53
Reducing stack by rule 6 (line 195):
   $1 = token ID_T ()
   $2 = token COMMA_T ()
   $3 = nterm declarations ()
-> $$ = nterm declarations ()
Stack now 0 1 3 5
Entering state 9
Next token is token CODE_T ()
Shifting token CODE_T ()
Entering state 31
Reading a token: Next token is token READ_T ()
Shifting token READ_T ()
Entering state 21
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 43
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 73
Reading a token: Next token is token KET_T ()
Shifting token KET_T ()
Entering state 92
Reducing stack by rule 11 (line 219):
   $1 = token READ_T ()
   $2 = token BRA_T ()
   $3 = token ID_T ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token IF_T ()
Shifting token IF_T ()
Entering state 16
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 16
Entering state 26
Reading a token: Next token is token LESS_THAN_EQUAL_TO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 16
Entering state 37
Next token is token LESS_THAN_EQUAL_TO_T ()
Shifting token LESS_THAN_EQUAL_TO_T ()
Entering state 62
Reducing stack by rule 36 (line 334):
   $1 = token LESS_THAN_EQUAL_TO_T ()
-> $$ = nterm comp ()
Stack now 0 1 3 5 9 31 24 44 16 37
Entering state 66
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 16 37 66
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 16 37 66
Entering state 26
Reading a token: Next token is token OR_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 16 37 66
Entering state 85
Reducing stack by rule 25 (line 284):
   $1 = nterm expr ()
   $2 = nterm comp ()
   $3 = nterm expr ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 31 24 44 16
Entering state 36
Next token is token OR_T ()
Shifting token OR_T ()
Entering state 58
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 16 36 58
Entering state 26
Reading a token: Next token is token GREATER_THAN_EQUAL_TO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 16 36 58
Entering state 37
Next token is token GREATER_THAN_EQUAL_TO_T ()
Shifting token GREATER_THAN_EQUAL_TO_T ()
Entering state 64
Reducing stack by rule 37 (line 338):
   $1 = token GREATER_THAN_EQUAL_TO_T ()
-> $$ = nterm comp ()
Stack now 0 1 3 5 9 31 24 44 16 36 58 37
Entering state 66
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 16 36 58 37 66
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 16 36 58 37 66
Entering state 26
Reading a token: Next token is token THEN_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 16 36 58 37 66
Entering state 85
Reducing stack by rule 25 (line 284):
   $1 = nterm expr ()
   $2 = nterm comp ()
   $3 = nterm expr ()
-> $$ = nterm condition ()
Stack now 0 1 3 5 9 31 24 44 16 36 58
Entering state 36
Next token is token THEN_T ()
Reducing stack by rule 21 (line 266):
   $1 = nterm condition ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 31 24 44 16 36 58
Entering state 83
Reducing stack by rule 24 (line 278):
   $1 = nterm condition ()
   $2 = token OR_T ()
   $3 = nterm conditional ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 31 24 44 16
Entering state 35
Next token is token THEN_T ()
Shifting token THEN_T ()
Entering state 57
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 16 35 57 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 16 35 57 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 16 35 57
Entering state 24
Reading a token: Next token is token END_IF_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 16 35 57
Entering state 82
Next token is token END_IF_T ()
Shifting token END_IF_T ()
Entering state 95
Reducing stack by rule 12 (line 223):
   $1 = token IF_T ()
   $2 = nterm conditional ()
   $3 = token THEN_T ()
   $4 = nterm statement_block ()
   $5 = token END_IF_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 11
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 20 42 11
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 20 42 11
Entering state 26
Reading a token: Next token is token MINUS_T ()
Shifting token MINUS_T ()
Entering state 47
Reducing stack by rule 39 (line 349):
   $1 = token MINUS_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 20 42 11 26
Entering state 50
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 20 42 11 26 50
Entering state 27
Reducing stack by rule 31 (line 312):
   $1 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 20 42 11 26 50
Entering state 26
Reading a token: Next token is token KET_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 20 42 11 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 20 42 11
Entering state 32
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 55
Reducing stack by rule 29 (line 304):
   $1 = token BRA_T ()
   $2 = nterm expr ()
   $3 = token KET_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token FOR_T ()
Shifting token FOR_T ()
Entering state 19
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 40
Reading a token: Next token is token IS_T ()
Shifting token IS_T ()
Entering state 69
Reading a token: Next token is token MINUS_T ()
Shifting token MINUS_T ()
Entering state 15
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 40 69 15
Entering state 33
Reducing stack by rule 30 (line 308):
   $1 = token MINUS_T ()
   $2 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 40 69
Entering state 26
Reading a token: Next token is token BY_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 40 69
Entering state 88
Next token is token BY_T ()
Shifting token BY_T ()
Entering state 98
Reading a token: Next token is token MINUS_T ()
Shifting token MINUS_T ()
Entering state 15
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 40 69 88 98 15
Entering state 33
Reducing stack by rule 30 (line 308):
   $1 = token MINUS_T ()
   $2 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 40 69 88 98
Entering state 26
Reading a token: Next token is token TO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 40 69 88 98
Entering state 102
Next token is token TO_T ()
Shifting token TO_T ()
Entering state 104
Reading a token: Next token is token MINUS_T ()
Shifting token MINUS_T ()
Entering state 15
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 15
Entering state 33
Reducing stack by rule 30 (line 308):
   $1 = token MINUS_T ()
   $2 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104
Entering state 26
Reading a token: Next token is token DO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104
Entering state 105
Next token is token DO_T ()
Shifting token DO_T ()
Entering state 106
Reducing stack by rule 18 (line 249):
   $1 = token ID_T ()
   $2 = token IS_T ()
   $3 = nterm expr ()
   $4 = token BY_T ()
   $5 = nterm expr ()
   $6 = token TO_T ()
   $7 = nterm expr ()
   $8 = token DO_T ()
-> $$ = nterm for_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19
Entering state 41
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 41 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 41 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 41
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 41 24 44
Entering state 24
Reading a token: Next token is token END_FOR_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 41 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 19 41
Entering state 70
Next token is token END_FOR_T ()
Shifting token END_FOR_T ()
Entering state 89
Reducing stack by rule 17 (line 243):
   $1 = token FOR_T ()
   $2 = nterm for_block ()
   $3 = nterm statement_block ()
   $4 = token END_FOR_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token MINUS_T ()
Shifting token MINUS_T ()
Entering state 15
Reading a token: Next token is token INTEGER_CONSTANT_T ()
Shifting token INTEGER_CONSTANT_T ()
Entering state 12
Reducing stack by rule 45 (line 378):
   $1 = token INTEGER_CONSTANT_T ()
-> $$ = nterm const ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 15
Entering state 33
Reducing stack by rule 30 (line 308):
   $1 = token MINUS_T ()
   $2 = nterm const ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 26
Reading a token: Next token is token ASSIGNMENT_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 25
Next token is token ASSIGNMENT_T ()
Shifting token ASSIGNMENT_T ()
Entering state 45
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 75
Reducing stack by rule 9 (line 211):
   $1 = nterm expr ()
   $2 = token ASSIGNMENT_T ()
   $3 = token ID_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token FOR_T ()
Shifting token FOR_T ()
Entering state 19
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 40
Reading a token: Next token is token IS_T ()
Shifting token IS_T ()
Entering state 69
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69
Entering state 26
Reading a token: Next token is token MULTIPLY_T ()
Shifting token MULTIPLY_T ()
Entering state 48
Reducing stack by rule 40 (line 353):
   $1 = token MULTIPLY_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 26 50
Entering state 26
Reading a token: Next token is token MULTIPLY_T ()
Shifting token MULTIPLY_T ()
Entering state 48
Reducing stack by rule 40 (line 353):
   $1 = token MULTIPLY_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 26 50 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 26 50 26 50
Entering state 26
Reading a token: Next token is token BY_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 26 50 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69
Entering state 88
Next token is token BY_T ()
Shifting token BY_T ()
Entering state 98
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98
Entering state 26
Reading a token: Next token is token MULTIPLY_T ()
Shifting token MULTIPLY_T ()
Entering state 48
Reducing stack by rule 40 (line 353):
   $1 = token MULTIPLY_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50
Entering state 26
Reading a token: Next token is token MULTIPLY_T ()
Shifting token MULTIPLY_T ()
Entering state 48
Reducing stack by rule 40 (line 353):
   $1 = token MULTIPLY_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50 26 50
Entering state 26
Reading a token: Next token is token MULTIPLY_T ()
Shifting token MULTIPLY_T ()
Entering state 48
Reducing stack by rule 40 (line 353):
   $1 = token MULTIPLY_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50 26 50 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50 26 50 26 50
Entering state 26
Reading a token: Next token is token MULTIPLY_T ()
Shifting token MULTIPLY_T ()
Entering state 48
Reducing stack by rule 40 (line 353):
   $1 = token MULTIPLY_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50 26 50 26 50 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50 26 50 26 50 26 50
Entering state 26
Reading a token: Next token is token TO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50 26 50 26 50 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50 26 50 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98
Entering state 102
Next token is token TO_T ()
Shifting token TO_T ()
Entering state 104
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104
Entering state 26
Reading a token: Next token is token MULTIPLY_T ()
Shifting token MULTIPLY_T ()
Entering state 48
Reducing stack by rule 40 (line 353):
   $1 = token MULTIPLY_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50
Entering state 26
Reading a token: Next token is token MULTIPLY_T ()
Shifting token MULTIPLY_T ()
Entering state 48
Reducing stack by rule 40 (line 353):
   $1 = token MULTIPLY_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26
Entering state 50
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 11
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11
Entering state 26
Reading a token: Next token is token ADD_T ()
Shifting token ADD_T ()
Entering state 46
Reducing stack by rule 38 (line 345):
   $1 = token ADD_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50
Entering state 26
Reading a token: Next token is token ADD_T ()
Shifting token ADD_T ()
Entering state 46
Reducing stack by rule 38 (line 345):
   $1 = token ADD_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50 26 50
Entering state 26
Reading a token: Next token is token ADD_T ()
Shifting token ADD_T ()
Entering state 46
Reducing stack by rule 38 (line 345):
   $1 = token ADD_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50 26 50 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50 26 50 26 50
Entering state 26
Reading a token: Next token is token ADD_T ()
Shifting token ADD_T ()
Entering state 46
Reducing stack by rule 38 (line 345):
   $1 = token ADD_T ()
-> $$ = nterm op ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50 26 50 26 50 26
Entering state 50
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50 26 50 26 50 26 50
Entering state 26
Reading a token: Next token is token KET_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50 26 50 26 50 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50 26 50 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50 11
Entering state 32
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 55
Reducing stack by rule 29 (line 304):
   $1 = token BRA_T ()
   $2 = nterm expr ()
   $3 = token KET_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50
Entering state 26
Reading a token: Next token is token DO_T ()
Reducing stack by rule 26 (line 290):
   $1 = nterm val ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104 26 50
Entering state 76
Reducing stack by rule 27 (line 294):
   $1 = nterm val ()
   $2 = nterm op ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 40 69 88 98 102 104
Entering state 105
Next token is token DO_T ()
Shifting token DO_T ()
Entering state 106
Reducing stack by rule 18 (line 249):
   $1 = token ID_T ()
   $2 = token IS_T ()
   $3 = nterm expr ()
   $4 = token BY_T ()
   $5 = nterm expr ()
   $6 = token TO_T ()
   $7 = nterm expr ()
   $8 = token DO_T ()
-> $$ = nterm for_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19
Entering state 41
Reading a token: Next token is token WRITE_T ()
Shifting token WRITE_T ()
Entering state 20
Reading a token: Next token is token BRA_T ()
Shifting token BRA_T ()
Entering state 42
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 10
Reducing stack by rule 28 (line 300):
   $1 = token ID_T ()
-> $$ = nterm val ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 41 20 42
Entering state 72
Reading a token: Next token is token KET_T ()
Reducing stack by rule 19 (line 256):
   $1 = nterm val ()
-> $$ = nterm write_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 41 20 42
Entering state 71
Next token is token KET_T ()
Shifting token KET_T ()
Entering state 90
Reducing stack by rule 10 (line 215):
   $1 = token WRITE_T ()
   $2 = token BRA_T ()
   $3 = nterm write_block ()
   $4 = token KET_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 41
Entering state 24
Reading a token: Next token is token SEMI_COLON_T ()
Shifting token SEMI_COLON_T ()
Entering state 44
Reading a token: Next token is token NEWLINE_T ()
Shifting token NEWLINE_T ()
Entering state 22
Reducing stack by rule 16 (line 239):
   $1 = token NEWLINE_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 41 24 44
Entering state 24
Reading a token: Next token is token END_FOR_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 41 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44 19 41
Entering state 70
Next token is token END_FOR_T ()
Shifting token END_FOR_T ()
Entering state 89
Reducing stack by rule 17 (line 243):
   $1 = token FOR_T ()
   $2 = nterm for_block ()
   $3 = nterm statement_block ()
   $4 = token END_FOR_T ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 24
Reading a token: Next token is token ENDP_T ()
Reducing stack by rule 8 (line 205):
   $1 = nterm statement ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 24 44 24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31 PROGRAM -> ProgV
 `-- `-- `-- `--Type -> int
  |   `-- |       |   `-- |       |       |   `-- |       |       |   `-- Node identifier -> READ_STATEMENT
Identifier -> integer
 |       |       |   |   `-- |       |       |   |   `-- Node identifier -> IF_STATEMENT
 |       |       |   |   `--Conditional -> CONDITIONAL_OR
 |       |       |   |   `-- Node identifier -> CONDITION
 |       |       |   |   `-- Node identifier -> EXPR
 |       |       |   |   `-- Node identifier -> VAL_ID
Identifier -> integer
 |       |       |   |   |   `-- |       |       |   |   |       |   `-- Node identifier -> CONDITION
 |       |       |   |   |       |   `--Comparator -> [<=] COMPARATOR_LESS_THAN_EQUAL_TO
 |       |       |   |   |       |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   `-- Node identifier -> VAL
 |       |       |   |   |       |   |   `-- Constant [INTEGER_CONSTANT] -> 5
 |       |       |   |   |       |   |   |   `-- |       |       |   |   |       |   |   |       |   `-- |       |       |   |   |       |   |   |       |               |   `-- Node identifier -> CONDITIONAL
 |       |       |   |   |       |   |   |       |               |   `-- Node identifier -> CONDITION
 |       |       |   |   |       |   |   |       |               |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   `-- Node identifier -> VAL_ID
Identifier -> integer
 |       |       |   |   |       |   |   |       |               |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   `-- Node identifier -> CONDITION
 |       |       |   |   |       |   |   |       |               |   |       |   `--Comparator -> [>=] COMPARATOR_GREATER_THAN_EQUAL_TO
 |       |       |   |   |       |   |   |       |               |   |       |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   `-- Node identifier -> VAL
 |       |       |   |   |       |   |   |       |               |   |       |   |   `-- Constant [INTEGER_CONSTANT] -> 12
 |       |       |   |   |       |   |   |       |               |   |       |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   `-- Node identifier -> WRITE_STATEMENT
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   `-- Node identifier -> WRITE_BLOCK
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   `-- Node identifier -> VAL_ID
Identifier -> integer
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   `-- Node identifier -> WRITE_STATEMENT
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   `-- Node identifier -> WRITE_BLOCK
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   `-- Node identifier -> VAL_BRACKETS
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   `-- Node identifier -> VAL
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   `-- Constant [INTEGER_CONSTANT] -> 36
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   `-- Node identifier -> VAL
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   `-- Constant [INTEGER_CONSTANT] -> 1
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   `-- Node identifier -> NEWLINE_STATEMENT
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   `-- Node identifier -> FOR_STATEMENT
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   `-- Node identifier -> FOR_BODY
Identifier -> integer
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   `-- Node identifier -> VAL_NEGATIVE
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   `-- Constant [INTEGER_CONSTANT] -> 1
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   `-- Node identifier -> FOR_BODY
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   `-- Node identifier -> VAL_NEGATIVE
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   `-- Constant [INTEGER_CONSTANT] -> 1
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   `-- Node identifier -> VAL_NEGATIVE
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   `-- Constant [INTEGER_CONSTANT] -> 5
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   `-- Node identifier -> WRITE_STATEMENT
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   `-- Node identifier -> WRITE_BLOCK
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   `-- Node identifier -> VAL_ID
Identifier -> integer
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   `-- Node identifier -> NEWLINE_STATEMENT
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   `-- Node identifier -> ASSIGNMENT_STATEMENT
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   `-- Node identifier -> VAL_NEGATIVE
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   `-- Constant [INTEGER_CONSTANT] -> 1
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   `-- Node identifier -> FOR_STATEMENT
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   `-- Node identifier -> FOR_BODY
Identifier -> integer
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   `-- Node identifier -> FOR_BODY
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   `-- Node identifier -> VAL_BRACKETS
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   `-- Node identifier -> EXPR
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   `-- Node identifier -> VAL_ID
Identifier -> i
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   `-- Node identifier -> WRITE_STATEMENT
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   `-- Node identifier -> WRITE_BLOCK
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   `-- Node identifier -> VAL_ID
Identifier -> integer
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   |       |       |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   |       |       |   `-- Node identifier -> NEWLINE_STATEMENT
 |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   |       |       |   |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   |       |       |   |               |   `-- |       |       |   |   |       |   |   |       |               |   |       |   |   |       |               |           |   |       |       |           |   |       |   |   |       |               |       |       |       |   |   |       |       |   |       |       |   |       |               |   |       |       |   |               |   |       |       |       |   |   |   |   |   |                       |   |   |   |   |   |   |   |   |   |                                       |   |   |   |   |   |   |   |   |   |   |   |   |   |                                       |       |                               |   |       |       |   |               |                                   |   `--24 44
Entering state 74
Reducing stack by rule 7 (line 201):
   $1 = nterm statement ()
   $2 = token SEMI_COLON_T ()
   $3 = nterm statement_block ()
-> $$ = nterm statement_block ()
Stack now 0 1 3 5 9 31
Entering state 54
Reducing stack by rule 2 (line 175):
   $1 = token DECLARATIONS_T ()
   $2 = nterm declarations ()
   $3 = token CODE_T ()
   $4 = nterm statement_block ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP_T ()
Shifting token ENDP_T ()
Entering state 28
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 51
Reading a token: Next token is token FULL_STOP_T ()
Shifting token FULL_STOP_T ()
Entering state 77
Reducing stack by rule 1 (line 160):
   $1 = token ID_T ()
   $2 = token COLON_T ()
   $3 = nterm block ()
   $4 = token ENDP_T ()
   $5 = token ID_T ()
   $6 = token FULL_STOP_T ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
